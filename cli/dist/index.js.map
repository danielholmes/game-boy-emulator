{"version":3,"sources":["../src/index.ts"],"names":["cartridge","Cartridge","Uint8Array","map","nintendoLogo","Error","vRam","VRam","initializeRandomly","mmu","Mmu","bios","WorkingRam","IOMemory","OamMemory","ZeroPageRam","screen","setPixel","cpu","Cpu","device","Device","Gpu","insertCartridge","turnOn","pixelToOutChar","color","tileToString","tile","r","join","printEnd","console","log","bGP","toString","forEach","i","getTileDataFromTable1","some","c","getTileDataFromTable2","bgMap1","row","reduce","accu","split","accuRow","newRow","TOTAL","opCode","readByte","registers","pc","getInstructionLabel","tickCycle","e"],"mappings":"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","sourcesContent":["import {\n  Device,\n  Cpu,\n  Gpu,\n  Mmu,\n  bios,\n  IOMemory,\n  VRam,\n  WorkingRam,\n  ZeroPageRam,\n  OamMemory,\n  PixelColor,\n  Tile, Cartridge,\n  nintendoLogo,\n  isValidCartridge\n} from \"@gebby/core\";\nimport { range, flatMap, repeat, zip } from \"lodash\";\n\nconst cartridge = new Cartridge(\n  new Uint8Array([\n    ...range(0x0000, 0x0104).map(() => 0x00),\n    ...nintendoLogo\n  ])\n);\nif (!isValidCartridge(cartridge)) {\n  throw new Error(\"Invalid cartridge\");\n}\n\nconst vRam = VRam.initializeRandomly();\n\nconst mmu = new Mmu(\n  bios,\n  new WorkingRam(),\n  vRam,\n  new IOMemory(),\n  new OamMemory(),\n  new ZeroPageRam()\n);\n\nconst screen = {\n  setPixel(): void {\n    // TODO:\n  }\n};\n\nconst cpu = new Cpu();\n\nconst device = new Device(cpu, new Gpu(mmu, screen), mmu);\ndevice.insertCartridge(cartridge);\ndevice.turnOn();\n\n// process.stdout.write instead of console.log\n// Clear: console.log('\\033c')\n// Alt: console.log('\\033c\\033[3J')\n// Console pixels: console.log('\\u2591', '\\u2592', '\\u2588');\n\n\nconst pixelToOutChar = (color: PixelColor): string => {\n  switch (color) {\n    case 3:\n      return \"\\u2588\";\n    case 2:\n      return \"\\u2592\";\n    case 1:\n      return \"\\u2591\";\n  }\n  return \" \";\n};\n\nconst tileToString = (tile: Tile): string =>\n  tile.map((r) => r.map(pixelToOutChar).join(\"\")).join(\"\\n\");\n\nconst printEnd = (): void => {\n  console.log(\"BG & window palette\", mmu.bGP.toString(2));\n\n  console.log(\"Table 1 tiles:\");\n  range(0, 255)\n    .forEach((i) => {\n      const tile = vRam.getTileDataFromTable1(i);\n      if (flatMap(tile).some((c) => c !== 0)) {\n        console.log(i + \")\");\n        console.log(tileToString(tile));\n      }\n    });\n\n  console.log(\"Table 2 tiles:\");\n  range(0, 255)\n    .forEach((i) => {\n      const tile = vRam.getTileDataFromTable2(i);\n      if (flatMap(tile).some((c) => c !== 0)) {\n        console.log(i + \")\");\n        console.log(tileToString(tile));\n      }\n    });\n\n  console.log(\"Background map 1:\");\n  console.log(\n    vRam.bgMap1\n      .map((row) =>\n        row.map((i) => tileToString(vRam.getTileDataFromTable1(i)))\n          .reduce(\n            (accu: string, tile: string): string =>\n              zip(\n                accu.split(\"\\n\"),\n                tile.split(\"\\n\")\n              )\n                .map(([accuRow, newRow]) => accuRow + newRow)\n                .join(\"\\n\")\n            ,\n            repeat(\"\\n\", 7)\n          )\n      )\n      .join(\"\\n\")\n  );\n};\n\nconst TOTAL = 100000;\nfor (let i = 0; i < TOTAL; i++) {\n  const opCode = mmu.readByte(cpu.registers.pc);\n  console.log(\n    i.toString() + \")\",\n    \"@0x\" + cpu.registers.pc.toString(16),\n    \"0x\" + opCode.toString(16),\n    cpu.getInstructionLabel(opCode)\n  );\n  try {\n    device.tickCycle();\n  } catch (e) {\n    printEnd();\n    throw e;\n  }\n  // if (i % 1000 === 0 || i === (TOTAL - 1)) {\n  //   const values = vRam.getValues();\n  //   const filled: { [address: number]: number } = {};\n  //   for (let j = 0; j < values.length; j++) {\n  //     if (values[j] !== 0) {\n  //       filled[j] = values[j];\n  //     }\n  //   }\n  //   const addresses = Object.keys(filled).map((k) => parseInt(k)).sort();\n  //   console.log(\"MEM\", addresses.length);\n  //   if (addresses.length > 0) {\n  //     const V_RAM_BASE = 0x8000;\n  //     console.log(\n  //       \"  0x\" + (addresses.sort()[0] + V_RAM_BASE).toString(16),\n  //       \"(0x\" + filled[addresses[0]].toString(16) + \")\",\n  //       \"-\",\n  //       \"0x\" + (addresses[addresses.length - 1] + V_RAM_BASE).toString(16)\n  //     );\n  //   }\n  //   // console.log(\n  //   //   sortBy(\n  //   //     toPairs(filled),\n  //   //     ([address, ]) => address\n  //   //   )\n  //   //     .map(([address, value]) =>\n  //   //       `0x${parseInt(address).toString(16)}: 0x${value.toString(16)}`\n  //   //     )\n  //   //     .join(' ')\n  //   // );\n  // }\n}\n\nprintEnd();\n"],"file":"index.js"}