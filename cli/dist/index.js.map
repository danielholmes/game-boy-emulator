{"version":3,"sources":["../src/index.ts"],"names":["cartridge","Cartridge","Uint8Array","vRam","VRam","mmu","Mmu","bios","WorkingRam","IOMemory","OamMemory","ZeroPageRam","screen","setPixel","cpu","Cpu","device","Device","Gpu","i","console","log","toString","registers","pc","readByte","tick","values","getValues","filled","j","length","Object","keys"],"mappings":";;AAAA;;AAGA,IAAMA,SAAS,GAAG,IAAIC,eAAJ,CAChB,IAAIC,UAAJ,CAAe,CACb,IADa,EACP;AACN,IAFa,EAEP;AACN,IAHa,EAGP;AACN,IAJa,EAIP;AACN,IALa,EAMb,IANa,EAOb,IAPa,EAQb,IARa,EASb,IATa,EAUb,IAVa,EAWb,IAXa,EAYb,IAZa,EAab,IAba,EAcb,IAda,EAeb,IAfa,EAgBb,IAhBa,EAiBb,IAjBa,EAkBb,IAlBa,EAmBb,IAnBa,EAoBb,IApBa,EAqBb,IArBa,EAsBb,IAtBa,EAuBb,IAvBa,EAwBb,IAxBa,EAyBb,IAzBa,EA0Bb,IA1Ba,EA2Bb,IA3Ba,EA4Bb,IA5Ba,EA6Bb,IA7Ba,EA8Bb,IA9Ba,EA+Bb,IA/Ba,EAgCb,IAhCa,EAiCb,IAjCa,EAkCb,IAlCa,EAmCb,IAnCa,EAoCb,IApCa,EAqCb,IArCa,EAsCb,IAtCa,EAuCb,IAvCa,EAwCb,IAxCa,EAyCb,IAzCa,EA0Cb,IA1Ca,EA2Cb,IA3Ca,EA4Cb,IA5Ca,EA6Cb,IA7Ca,EA8Cb,IA9Ca,EA+Cb,IA/Ca,EAgDb,IAhDa,EAiDb,IAjDa,EAkDb,IAlDa,EAmDb,IAnDa,CAAf,CADgB,CAAlB;AAwDA,IAAMC,IAAI,GAAG,IAAIC,UAAJ,EAAb,C,CAAyB;;AAEzB,IAAMC,GAAG,GAAG,IAAIC,SAAJ,CACVC,UADU,EAEV,IAAIC,gBAAJ,EAFU,EAGVL,IAHU,EAIV,IAAIM,cAAJ,EAJU,EAKV,IAAIC,eAAJ,EALU,EAMV,IAAIC,iBAAJ,EANU,CAAZ;AASA,IAAMC,MAAM,GAAG;AACbC,EAAAA,QADa,sBACI,CACf;AACD;AAHY,CAAf;AAMA,IAAMC,GAAG,GAAG,IAAIC,SAAJ,EAAZ;AAEA,IAAMC,MAAM,GAAG,IAAIC,YAAJ,CACbH,GADa,EAEb,IAAII,SAAJ,CAAQb,GAAR,EAAaO,MAAb,CAFa,EAGbP,GAHa,CAAf;;AAMA,KAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,OAApB,EAA6BA,CAAC,EAA9B,EAAkC;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,QAAF,KAAe,MAAf,GAAwBR,GAAG,CAACS,SAAJ,CAAcC,EAAd,CAAiBF,QAAjB,CAA0B,EAA1B,CAAxB,GAAwD,KAAxD,GAAgEjB,GAAG,CAACoB,QAAJ,CAAaX,GAAG,CAACS,SAAJ,CAAcC,EAA3B,EAA+BF,QAA/B,CAAwC,EAAxC,CAA5E;AACAN,EAAAA,MAAM,CAACU,IAAP;;AACA,MAAIP,CAAC,GAAG,GAAJ,KAAY,CAAhB,EAAmB;AACjB,QAAMQ,MAAM,GAAGxB,IAAI,CAACyB,SAAL,EAAf;AACA,QAAMC,MAAsC,GAAG,EAA/C;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAIH,MAAM,CAACG,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACnBD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYH,MAAM,CAACG,CAAD,CAAlB;AACD;AACF;;AACDV,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcW,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBE,MAApB,CAA2BT,QAA3B,CAAoC,EAApC,CAA1B,EARiB,CASjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF;;AAEDF,OAAO,CAACC,GAAR,CAAY,MAAZ","sourcesContent":["import { Device, Cpu, Gpu, Mmu, bios, IOMemory, VRam, WorkingRam, ZeroPageRam, OamMemory, Cartridge } from \"@gebby/core\";\nimport { toPairs, sortBy } from \"lodash\";\n\nconst cartridge = new Cartridge(\n  new Uint8Array([\n    0x00, // 0x0100\n    0x00, // 0x0101\n    0x00, // 0x0102\n    0xCE, // 0x0104\n    0xED,\n    0x66,\n    0x66,\n    0xCC,\n    0x0D,\n    0x00,\n    0x0B,\n    0x03,\n    0x73,\n    0x00,\n    0x83,\n    0x00,\n    0x0C,\n    0x00,\n    0x0D,\n    0x00,\n    0x08,\n    0x11,\n    0x1F,\n    0x88,\n    0x89,\n    0x00,\n    0x0E,\n    0xDC,\n    0xCC,\n    0x6E,\n    0xE6,\n    0xDD,\n    0xDD,\n    0xD9,\n    0x99,\n    0xBB,\n    0xBB,\n    0x67,\n    0x63,\n    0x6E,\n    0x0E,\n    0xEC,\n    0xCC,\n    0xDD,\n    0xDC,\n    0x99,\n    0x9F,\n    0xBB,\n    0xB9,\n    0x33,\n    0x3E\n  ])\n);\n\nconst vRam = new VRam(); // VRam.initializeRandomly();\n\nconst mmu = new Mmu(\n  bios,\n  new WorkingRam(),\n  vRam,\n  new IOMemory(),\n  new OamMemory(),\n  new ZeroPageRam()\n);\n\nconst screen = {\n  setPixel(): void {\n    // TODO:\n  }\n};\n\nconst cpu = new Cpu()\n\nconst device = new Device(\n  cpu,\n  new Gpu(mmu, screen),\n  mmu\n);\n\nfor (let i = 0; i < 1000000; i++) {\n  console.log(i.toString() + ') 0x' + cpu.registers.pc.toString(16) + ' 0x' + mmu.readByte(cpu.registers.pc).toString(16));\n  device.tick();\n  if (i % 200 === 0) {\n    const values = vRam.getValues();\n    const filled: { [address: number]: number; } = {};\n    for (let j = 0; j < values.length; j++) {\n      if (values[j] !== 0) {\n        filled[j] = values[j];\n      }\n    }\n    console.log(\"-------- \" + Object.keys(filled).length.toString(16));\n    // console.log(\n    //   sortBy(\n    //     toPairs(filled),\n    //     ([address, ]) => address\n    //   )\n    //     .map(([address, value]) =>\n    //       `0x${parseInt(address).toString(16)}: 0x${value.toString(16)}`\n    //     )\n    //     .join(' ')\n    // );\n  }\n}\n\nconsole.log(\"done\");\n"],"file":"index.js"}