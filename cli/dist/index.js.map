{"version":3,"sources":["../src/index.ts"],"names":["cartridge","Cartridge","Uint8Array","nintendoLogo","vRam","VRam","initializeRandomly","mmu","Mmu","bios","WorkingRam","IOMemory","OamMemory","ZeroPageRam","screen","setPixel","cpu","Cpu","device","Device","Gpu","insertCartridge","turnOn","TOTAL","i","tickCycle","pixelToOutChar","color","tileToString","tile","map","r","join","console","log","bGP","toString","forEach","getTileDataFromTable1","some","c","getTileDataFromTable2"],"mappings":"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","sourcesContent":["import {\n  Device,\n  Cpu,\n  Gpu,\n  Mmu,\n  bios,\n  IOMemory,\n  VRam,\n  WorkingRam,\n  ZeroPageRam,\n  OamMemory,\n  PixelColor,\n  Tile, Cartridge,\n  nintendoLogo\n} from \"@gebby/core\";\nimport { range, flatMap } from \"lodash\";\n\nconst cartridge = new Cartridge(\n  new Uint8Array([\n    0x00, // 0x0100\n    0x00, // 0x0101\n    0x00, // 0x0102\n    0x00, // 0x0103\n    ...nintendoLogo\n  ])\n);\n\nconst vRam = VRam.initializeRandomly();\n\nconst mmu = new Mmu(\n  bios,\n  new WorkingRam(),\n  vRam,\n  new IOMemory(),\n  new OamMemory(),\n  new ZeroPageRam()\n);\n\nconst screen = {\n  setPixel(): void {\n    // TODO:\n  }\n};\n\nconst cpu = new Cpu();\n\nconst device = new Device(cpu, new Gpu(mmu, screen), mmu);\ndevice.insertCartridge(cartridge);\ndevice.turnOn();\n\n// process.stdout.write instead of console.log\n// Clear: console.log('\\033c')\n// Alt: console.log('\\033c\\033[3J')\n// Console pixels: console.log('\\u2591', '\\u2592', '\\u2588');\n\nconst TOTAL = 250000;\nfor (let i = 0; i < TOTAL; i++) {\n  /*const opCode = mmu.readByte(cpu.registers.pc);\n  console.log(\n    i.toString() + \")\",\n    \"@0x\" + cpu.registers.pc.toString(16),\n    \"0x\" + opCode.toString(16),\n    cpu.getInstructionLabel(opCode)\n  );*/\n  device.tickCycle();\n  // if (i % 1000 === 0 || i === (TOTAL - 1)) {\n  //   const values = vRam.getValues();\n  //   const filled: { [address: number]: number } = {};\n  //   for (let j = 0; j < values.length; j++) {\n  //     if (values[j] !== 0) {\n  //       filled[j] = values[j];\n  //     }\n  //   }\n  //   const addresses = Object.keys(filled).map((k) => parseInt(k)).sort();\n  //   console.log(\"MEM\", addresses.length);\n  //   if (addresses.length > 0) {\n  //     const V_RAM_BASE = 0x8000;\n  //     console.log(\n  //       \"  0x\" + (addresses.sort()[0] + V_RAM_BASE).toString(16),\n  //       \"(0x\" + filled[addresses[0]].toString(16) + \")\",\n  //       \"-\",\n  //       \"0x\" + (addresses[addresses.length - 1] + V_RAM_BASE).toString(16)\n  //     );\n  //   }\n  //   // console.log(\n  //   //   sortBy(\n  //   //     toPairs(filled),\n  //   //     ([address, ]) => address\n  //   //   )\n  //   //     .map(([address, value]) =>\n  //   //       `0x${parseInt(address).toString(16)}: 0x${value.toString(16)}`\n  //   //     )\n  //   //     .join(' ')\n  //   // );\n  // }\n}\n\nconst pixelToOutChar = (color: PixelColor): string => {\n  switch (color) {\n    case 3:\n      return '\\u2588';\n    case 2:\n      return '\\u2592';\n    case 1:\n      return '\\u2591';\n  }\n  return \" \";\n};\n\nconst tileToString = (tile: Tile): string =>\n  tile.map((r) => r.map(pixelToOutChar).join('')).join(\"\\n\")\n\nconsole.log(\"BG & window palette\", mmu.bGP.toString(2));\nconsole.log(\"Table 1 tiles:\");\nrange(0, 255)\n  .forEach((i) => {\n    const tile = vRam.getTileDataFromTable1(i);\n    if (flatMap(tile).some((c) => c !== 0)) {\n      console.log(i + ')');\n      console.log(tileToString(tile));\n    }\n  });\nconsole.log(\"Table 2 tiles:\");\nrange(0, 255)\n  .forEach((i) => {\n    const tile = vRam.getTileDataFromTable2(i);\n    if (flatMap(tile).some((c) => c !== 0)) {\n      console.log(i + ')');\n      console.log(tileToString(tile));\n    }\n  });\nconsole.log(\"done\");\n"],"file":"index.js"}