{"version":3,"sources":["../src/index.ts"],"names":["vRam","VRam","initializeRandomly","mmu","Mmu","bios","WorkingRam","IOMemory","OamMemory","ZeroPageRam","screen","setPixel","cpu","Cpu","device","Device","Gpu","turnOn","TOTAL","i","opCode","readByte","registers","pc","console","log","toString","getInstructionLabel","tickCycle","values","getValues","filled","j","length","addresses","Object","keys","sort"],"mappings":";;AAAA;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,IAAMA,IAAI,GAAGC,WAAKC,kBAAL,EAAb;;AAEA,IAAMC,GAAG,GAAG,IAAIC,SAAJ,CACVC,UADU,EAEV,IAAIC,gBAAJ,EAFU,EAGVN,IAHU,EAIV,IAAIO,cAAJ,EAJU,EAKV,IAAIC,eAAJ,EALU,EAMV,IAAIC,iBAAJ,EANU,CAAZ;AASA,IAAMC,MAAM,GAAG;AACbC,EAAAA,QADa,sBACI,CACf;AACD;AAHY,CAAf;AAMA,IAAMC,GAAG,GAAG,IAAIC,SAAJ,EAAZ;AAEA,IAAMC,MAAM,GAAG,IAAIC,YAAJ,CAAWH,GAAX,EAAgB,IAAII,SAAJ,CAAQb,GAAR,EAAaO,MAAb,CAAhB,EAAsCP,GAAtC,CAAf;AACAW,MAAM,CAACG,MAAP,G,CAEA;AACA;AACA;AACA;;AAEA,IAAMC,KAAK,GAAG,QAAd;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAApB,EAA2BC,CAAC,EAA5B,EAAgC;AAC9B,MAAMC,MAAM,GAAGjB,GAAG,CAACkB,QAAJ,CAAaT,GAAG,CAACU,SAAJ,CAAcC,EAA3B,CAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CACEN,CAAC,CAACO,QAAF,KAAe,GADjB,EAEE,QAAQd,GAAG,CAACU,SAAJ,CAAcC,EAAd,CAAiBG,QAAjB,CAA0B,EAA1B,CAFV,EAGE,OAAON,MAAM,CAACM,QAAP,CAAgB,EAAhB,CAHT,EAIEd,GAAG,CAACe,mBAAJ,CAAwBP,MAAxB,CAJF;AAMAN,EAAAA,MAAM,CAACc,SAAP;;AACA,MAAIT,CAAC,GAAG,IAAJ,KAAa,CAAb,IAAkBA,CAAC,KAAMD,KAAK,GAAG,CAArC,EAAyC;AACvC,QAAMW,MAAM,GAAG7B,IAAI,CAAC8B,SAAL,EAAf;AACA,QAAMC,MAAqC,GAAG,EAA9C;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAIH,MAAM,CAACG,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACnBD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYH,MAAM,CAACG,CAAD,CAAlB;AACD;AACF;;AACD,QAAME,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,IAApB,EAAlB;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBS,SAAS,CAACD,MAA7B;;AACA,QAAIC,SAAS,CAACD,MAAV,GAAmB,CAAvB,EAA0B;AACxBT,MAAAA,OAAO,CAACC,GAAR,CACE,SAASS,SAAS,CAACG,IAAV,GAAiB,CAAjB,EAAoBX,QAApB,CAA6B,EAA7B,CADX,EAEE,QAAQK,MAAM,CAACG,SAAS,CAAC,CAAD,CAAV,CAAN,CAAqBR,QAArB,CAA8B,EAA9B,CAAR,GAA4C,GAF9C,EAGE,GAHF,EAIE,OAAOQ,SAAS,CAACA,SAAS,CAACD,MAAV,GAAmB,CAApB,CAAT,CAAgCP,QAAhC,CAAyC,EAAzC,CAJT;AAMD,KAjBsC,CAkBvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;AACF;;AAEDF,OAAO,CAACC,GAAR,CAAY,MAAZ","sourcesContent":["import {\n  Device,\n  Cpu,\n  Gpu,\n  Mmu,\n  bios,\n  IOMemory,\n  VRam,\n  WorkingRam,\n  ZeroPageRam,\n  OamMemory\n} from \"@gebby/core\";\n\n/* const cartridge = new Cartridge(\n  new Uint8Array([\n    0x00, // 0x0100\n    0x00, // 0x0101\n    0x00, // 0x0102\n    0xce, // 0x0104\n    0xed,\n    0x66,\n    0x66,\n    0xcc,\n    0x0d,\n    0x00,\n    0x0b,\n    0x03,\n    0x73,\n    0x00,\n    0x83,\n    0x00,\n    0x0c,\n    0x00,\n    0x0d,\n    0x00,\n    0x08,\n    0x11,\n    0x1f,\n    0x88,\n    0x89,\n    0x00,\n    0x0e,\n    0xdc,\n    0xcc,\n    0x6e,\n    0xe6,\n    0xdd,\n    0xdd,\n    0xd9,\n    0x99,\n    0xbb,\n    0xbb,\n    0x67,\n    0x63,\n    0x6e,\n    0x0e,\n    0xec,\n    0xcc,\n    0xdd,\n    0xdc,\n    0x99,\n    0x9f,\n    0xbb,\n    0xb9,\n    0x33,\n    0x3e\n  ])\n);*/\n\nconst vRam = VRam.initializeRandomly();\n\nconst mmu = new Mmu(\n  bios,\n  new WorkingRam(),\n  vRam,\n  new IOMemory(),\n  new OamMemory(),\n  new ZeroPageRam()\n);\n\nconst screen = {\n  setPixel(): void {\n    // TODO:\n  }\n};\n\nconst cpu = new Cpu();\n\nconst device = new Device(cpu, new Gpu(mmu, screen), mmu);\ndevice.turnOn();\n\n// process.stdout.write instead of console.log\n// Clear: console.log('\\033c')\n// Alt: console.log('\\033c\\033[3J')\n// Console pixels: console.log('\\u2591', '\\u2592', '\\u2588');\n\nconst TOTAL = 10000000;\nfor (let i = 0; i < TOTAL; i++) {\n  const opCode = mmu.readByte(cpu.registers.pc);\n  console.log(\n    i.toString() + \")\",\n    \"@0x\" + cpu.registers.pc.toString(16),\n    \"0x\" + opCode.toString(16),\n    cpu.getInstructionLabel(opCode)\n  );\n  device.tickCycle();\n  if (i % 1000 === 0 || i === (TOTAL - 1)) {\n    const values = vRam.getValues();\n    const filled: { [address: number]: number } = {};\n    for (let j = 0; j < values.length; j++) {\n      if (values[j] !== 0) {\n        filled[j] = values[j];\n      }\n    }\n    const addresses = Object.keys(filled).sort();\n    console.log(\"MEM\", addresses.length);\n    if (addresses.length > 0) {\n      console.log(\n        \"  0x\" + addresses.sort()[0].toString(16),\n        \"(0x\" + filled[addresses[0]].toString(16) + \")\",\n        \"-\",\n        \"0x\" + addresses[addresses.length - 1].toString(16)\n      );\n    }\n    // console.log(\n    //   sortBy(\n    //     toPairs(filled),\n    //     ([address, ]) => address\n    //   )\n    //     .map(([address, value]) =>\n    //       `0x${parseInt(address).toString(16)}: 0x${value.toString(16)}`\n    //     )\n    //     .join(' ')\n    // );\n  }\n}\n\nconsole.log(\"done\");\n"],"file":"index.js"}