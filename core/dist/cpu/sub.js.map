{"version":3,"sources":["../../src/cpu/sub.ts"],"names":["createSubR","opCode","register","InstructionDefinition","loadRegister","subtractFromRegister","createSubMHl","readMemory"],"mappings":";;;;;;;AAAA;;AAGO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAiBC,QAAjB;AAAA,SACxB,IAAIC,mCAAJ,CAA0BF,MAA1B,gBAAyCC,QAAzC,GACGE,YADH,CACgBF,QADhB,EAEGG,oBAFH,CAEwB,GAFxB,CADwB;AAAA,CAAnB;;;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACL,MAAD;AAAA,SAC1B,IAAIE,mCAAJ,CAA0BF,MAA1B,cACGG,YADH,CACgB,IADhB,EAEGG,UAFH,GAGGF,oBAHH,CAGwB,GAHxB,CAD0B;AAAA,CAArB","sourcesContent":["import { Instruction, InstructionDefinition, OpCode } from \"./instructions\";\nimport { ByteRegister } from \"./registers\";\n\nexport const createSubR = (opCode: OpCode, register: ByteRegister): Instruction =>\n  new InstructionDefinition(opCode, `SUB ${register}`)\n    .loadRegister(register)\n    .subtractFromRegister('a');\n\nexport const createSubMHl = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `SUB (hl)`)\n    .loadRegister('hl')\n    .readMemory()\n    .subtractFromRegister('a');\n"],"file":"sub.js"}