{"version":3,"sources":["../../src/cpu/sbc.ts"],"names":["SbcAR","register","cpu","oldA","registers","a","f","sbcAR","opCode","InstructionDefinition"],"mappings":";;;;;;;AAAA;;;;;;;;;;IAKMA,K;;;AAIJ,iBAAmBC,QAAnB,EAA2C;AAAA;;AAAA,oCAHL,CAGK;;AAAA;;AACzC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAEcC,G,EAA+B;AAC5C,UAAMC,IAAI,GAAGD,GAAG,CAACE,SAAJ,CAAcC,CAA3B;AACAH,MAAAA,GAAG,CAACE,SAAJ,CAAcC,CAAd,IAAmBH,GAAG,CAACE,SAAJ,CAAc,KAAKH,QAAnB,CAAnB;AACAC,MAAAA,GAAG,CAACE,SAAJ,CAAcC,CAAd,IAAmB,CAACH,GAAG,CAACE,SAAJ,CAAcE,CAAd,GAAkB,IAAnB,MAA6B,CAA7B,GAAiC,CAAjC,GAAqC,CAAxD;AACAJ,MAAAA,GAAG,CAACE,SAAJ,CAAcE,CAAd,GAAkBJ,GAAG,CAACE,SAAJ,CAAcC,CAAd,GAAkB,CAAlB,GAAsB,IAAtB,GAA6B,IAA/C;AACAH,MAAAA,GAAG,CAACE,SAAJ,CAAcC,CAAd,IAAmB,IAAnB;;AACA,UAAI,CAACH,GAAG,CAACE,SAAJ,CAAcC,CAAnB,EAAsB;AACpBH,QAAAA,GAAG,CAACE,SAAJ,CAAcE,CAAd,IAAmB,IAAnB;AACD;;AACD,UAAI,CAACJ,GAAG,CAACE,SAAJ,CAAcC,CAAd,GAAkBH,GAAG,CAACE,SAAJ,CAAc,KAAKH,QAAnB,CAAlB,GAAiDE,IAAlD,IAA0D,IAA9D,EAAoE;AAClED,QAAAA,GAAG,CAACE,SAAJ,CAAcE,CAAd,IAAmB,IAAnB;AACD;AACF;;;;;;AAGI,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,MAAD,EAAiBP,QAAjB;AAAA,SACnB,IAAIQ,mCAAJ,CAA0BD,MAA1B,kBAA2CP,QAA3C,GAAuD,CAAC,IAAID,KAAJ,CAAUC,QAAV,CAAD,CAAvD,CADmB;AAAA,CAAd","sourcesContent":["import { Instruction, InstructionDefinition, OpCode } from \"./instructions\";\nimport { ByteRegister } from \"./registers\";\nimport { LowLevelOp, LowLevelStateReturn } from \"./lowLevel\";\nimport { Cpu, ClockCycles } from \"./index\";\n\nclass SbcAR implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    const oldA = cpu.registers.a;\n    cpu.registers.a -= cpu.registers[this.register];\n    cpu.registers.a -= (cpu.registers.f & 0x10) === 1 ? 1 : 0;\n    cpu.registers.f = cpu.registers.a < 0 ? 0x50 : 0x40;\n    cpu.registers.a &= 0xff;\n    if (!cpu.registers.a) {\n      cpu.registers.f |= 0x80;\n    }\n    if ((cpu.registers.a ^ cpu.registers[this.register] ^ oldA) & 0x10) {\n      cpu.registers.f |= 0x20;\n    }\n  }\n}\n\nexport const sbcAR = (opCode: OpCode, register: ByteRegister): Instruction =>\n  new InstructionDefinition(opCode, `SBC a,${register}`, [new SbcAR(register)]);\n"],"file":"sbc.js"}