{"version":3,"sources":["../../src/cpu/jr.ts"],"names":["createJrCcN","opCode","flag","InstructionDefinition","loadSignedByteOperand","addToPcIfFlag","createJrN","addToRegister"],"mappings":";;;;;;;AAAA;;AAGO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAiBC,IAAjB;AAAA,SACzB,IAAIC,mCAAJ,CAA0BF,MAA1B,eAAwCC,IAAxC,SACGE,qBADH,GAEGC,aAFH,CAEiBH,IAFjB,CADyB;AAAA,CAApB,C,CAKP;AACA;AACA;;;;;AAEO,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACL,MAAD;AAAA,SACvB,IAAIE,mCAAJ,CAA0BF,MAA1B,EAAkC,MAAlC,EACGG,qBADH,GAEGG,aAFH,CAEiB,IAFjB,CADuB;AAAA,CAAlB","sourcesContent":["import { Instruction, InstructionDefinition, OpCode } from \"./instructions\";\nimport { CheckFlag } from \"./lowLevel\";\n\nexport const createJrCcN = (opCode: OpCode, flag: CheckFlag): Instruction =>\n  new InstructionDefinition(opCode, `JR ${flag},n`)\n    .loadSignedByteOperand()\n    .addToPcIfFlag(flag);\n\n// M = 1: n read: memory access\n// ; cc matches or unconditional\n// M = 2: internal delay\n\nexport const createJrN = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, \"JR n\")\n    .loadSignedByteOperand()\n    .addToRegister(\"pc\");\n"],"file":"jr.js"}