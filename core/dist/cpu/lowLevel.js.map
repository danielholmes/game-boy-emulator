{"version":3,"sources":["../../src/cpu/lowLevel.ts"],"names":["LoadRegister","register","cpu","registers","CompareToRegister","mmu","value","undefined","Error","previous","next","setFFromParts","RotateLeftThroughCarry","newFC","newValue","fC","newF","FLAG_C_MASK","FLAG_Z_MASK","f","ReadMemoryWord","readBigEndianWord","ReadMemory","readByte","WriteWordFromGroupedRegisterAddress","address","writeByte","BitFlags","position","bit","fZ","fN","fH","JR_FLAGS","JrCheck","flag","pc","ByteValueToSignedByte","WriteByteFromOperandAddress","WriteWordFromOperandAddress","writeWordBigEndian","StoreInRegister","WriteMemoryHighByteFromOperandAddress","operand","WriteMemoryLowByteFromOperandAddress","WriteMemoryFromRegisterAddress","InternalDelay","WriteMemoryWordHighByteFromStackPointer","sp","WriteMemoryWordLowByteFromStackPointer","SetRegister","LoadOperand","byte","LoadWordOperandHighByte","IncrementRegister","XOrRegister","a","F_Z_SET","DecrementRegister"],"mappings":"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","sourcesContent":["import { Mmu } from \"../memory/mmu\";\nimport {\n  ByteRegister,\n  FLAG_C_MASK,\n  FLAG_Z_BIT,\n  FLAG_Z_MASK,\n  NonAfGroupedWordRegister,\n  Register\n} from \"./registers\";\nimport {\n  ByteValue,\n  WordValue,\n  byteValueToSignedByte,\n  BitValue,\n  ByteBitPosition, binaryToNumber\n} from \"../types\";\nimport { Cpu, ClockCycles } from \".\";\n\nexport type LowLevelState = ByteValue | WordValue | undefined;\nexport type LowLevelStateReturn = ByteValue | WordValue | void;\n\n// Read16BitOperand // loads two bytes -> takes 8 cycles\n// LoadByteFromMemory // loads one byte -> takes 4 cycles\n// StoreToRegister(\"A\") // takes no extra cycles\n\n// TODO: Make all 0 or 4 cycles\n// TODO: Work on the fZ case which has different cycles depending on flag -\n//  might need to return cycles used\n\nexport interface LowLevelOperation {\n  readonly cycles: ClockCycles;\n  execute(cpu: Cpu, mmu: Mmu, value: LowLevelState): LowLevelStateReturn;\n}\n\nexport class LoadRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    return cpu.registers[this.register];\n  }\n}\n\nexport class CompareToRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"Undefined value\");\n    }\n    const previous = cpu.registers[this.register];\n    const next = previous - value;\n    cpu.registers.setFFromParts(\n      next === 0x00,\n      1,\n      (previous & 0xf) - (value & 0xf) < 0,\n      next < 0\n    );\n    return next;\n  }\n}\n\nexport class RotateLeftThroughCarry implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    const newFC: BitValue =\n      (cpu.registers[this.register] & (1 << 7)) !== 0 ? 1 : 0;\n    const newValue = (cpu.registers[this.register] << 1) + cpu.registers.fC;\n    cpu.registers[this.register] = newValue;\n    let newF = 0x00;\n    if (newFC === 1) {\n      newF |= FLAG_C_MASK;\n    } else {\n      newF &= ~FLAG_C_MASK;\n    }\n    if (newValue === 0) {\n      newF |= FLAG_Z_MASK;\n    }\n    cpu.registers.f = newF;\n  }\n}\n\nexport class ReadMemoryWord implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 8;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    return mmu.readBigEndianWord(value);\n  }\n}\n\nexport class ReadMemory implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    return mmu.readByte(value);\n  }\n}\n\nexport class WriteWordFromGroupedRegisterAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n  private readonly register: NonAfGroupedWordRegister;\n\n  public constructor(register: NonAfGroupedWordRegister) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address = cpu.registers[this.register];\n    mmu.writeByte(address, value);\n  }\n}\n\nexport class BitFlags implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly position: ByteBitPosition;\n\n  public constructor(position: ByteBitPosition) {\n    this.position = position;\n  }\n\n  public execute(cpu: Cpu, mmu: Mmu, value: LowLevelState): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error('value undefined');\n    }\n    const bit = value & (1 << this.position);\n    cpu.registers.fZ = bit === 0 ? 1 : 0;\n    cpu.registers.fN = 0;\n    cpu.registers.fH = 1;\n  }\n}\n\nexport type JrFlag = \"fNz\" | \"fZ\" | \"fC\" | \"fNc\";\nexport const JR_FLAGS: ReadonlyArray<JrFlag> = [\"fNz\", \"fZ\", \"fC\", \"fNc\"];\n\nexport class JrCheck implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly flag: JrFlag;\n\n  public constructor(flag: JrFlag) {\n    this.flag = flag;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n\n    if (this.flag) {\n      // TODO: Becomes a longer cycle operation, in internal\n      cpu.registers.pc += value;\n    }\n  }\n}\n\nexport class ByteValueToSignedByte implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n\n    return byteValueToSignedByte(value);\n  }\n}\n\n/**\n * @deprecated should be split\n */\nexport class WriteByteFromOperandAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 12;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address = mmu.readBigEndianWord(cpu.registers.pc);\n    mmu.writeByte(address, value);\n    cpu.registers.pc += 2;\n  }\n}\n\n/**\n * @deprecated should be split\n */\nexport class WriteWordFromOperandAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 16;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address = mmu.readBigEndianWord(cpu.registers.pc);\n    mmu.writeWordBigEndian(address, value);\n    cpu.registers.pc += 2;\n  }\n}\n\nexport class StoreInRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value not defined\");\n    }\n    cpu.registers[this.register] = value;\n  }\n}\n\nexport class WriteMemoryHighByteFromOperandAddress\n  implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const operand = mmu.readByte(cpu.registers.pc);\n    mmu.writeByte(0xff00 + operand + 1, value >> 8);\n    return value;\n  }\n}\n\nexport class WriteMemoryLowByteFromOperandAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const operand = mmu.readByte(cpu.registers.pc);\n    mmu.writeByte(0xff00 + operand, value & 255);\n    return value;\n  }\n}\n\nexport class WriteMemoryFromRegisterAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeWordBigEndian(0xff00 + cpu.registers[this.register], value);\n  }\n}\n\nexport class InternalDelay implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    return value;\n  }\n}\n\nexport class WriteMemoryWordHighByteFromStackPointer\nimplements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeByte(cpu.registers.sp + 1, value >> 8);\n    return value;\n  }\n}\n\nexport class WriteMemoryWordLowByteFromStackPointer\nimplements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeByte(cpu.registers.sp, value & 255);\n    return value;\n  }\n}\n\nexport class SetRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n  private readonly value: WordValue;\n\n  public constructor(register: Register, value: WordValue) {\n    this.register = register;\n    this.value = value;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    cpu.registers[this.register] = this.value;\n  }\n}\n\nexport class LoadOperand implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(cpu: Cpu, mmu: Mmu): LowLevelStateReturn {\n    const byte = mmu.readByte(cpu.registers.pc);\n    cpu.registers.pc++;\n    return byte;\n  }\n}\n\nexport class LoadWordOperandHighByte implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const byte = mmu.readByte(cpu.registers.pc);\n    cpu.registers.pc++;\n    return (byte << 8) + value;\n  }\n}\n\nexport class IncrementRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers[this.register]++;\n    return value;\n  }\n}\n\nexport class XOrRegister implements LowLevelOperation {\n  private static readonly F_Z_SET: number = binaryToNumber('10000000');\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    cpu.registers.a ^= cpu.registers[this.register];\n    cpu.registers.f = cpu.registers.a ? 0x00 : XOrRegister.F_Z_SET;\n  }\n}\n\nexport class DecrementRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers[this.register]--;\n    return value;\n  }\n}\n"],"file":"lowLevel.js"}