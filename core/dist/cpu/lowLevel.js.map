{"version":3,"sources":["../../src/cpu/lowLevel.ts"],"names":["LoadRegister","register","cpu","registers","ReadMemory","mmu","value","undefined","Error","readByte","WriteWordFromGroupedRegisterAddress","address","writeByte","BitFlags","t","FLAG_Z_MASK","flag","FLAG_Z","f","JrCheck","fNz","pc","WordValueToSignedByte","WriteByteFromOperandAddress","readBigEndianWord","WriteWordFromOperandAddress","writeWordBigEndian","StoreInRegister","WriteMemoryHighByteFromOperandAddress","operand","WriteMemoryLowByteFromOperandAddress","WriteMemoryFromRegisterAddress","InternalDelay","WriteMemoryWordHighByteFromStackPointer","sp","WriteMemoryWordLowByteFromStackPointer","SetRegister","LoadOperand","byte","LoadWordOperand","IncrementRegister","XOrRegister","a","DecrementRegister"],"mappings":";;;;;;;AACA;;AAOA;;;;;;;;;;IAmBaA,Y;;;AAIX,wBAAmBC,QAAnB,EAAuC;AAAA;;AAAA,oCAHD,CAGC;;AAAA;;AACrC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAEcC,G,EAA+B;AAC5C,aAAOA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,CAAP;AACD;;;;;;;;IAGUG,U;;;;;;oCAC2B,C;;;;;4BAGpCF,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,aAAOH,GAAG,CAACI,QAAJ,CAAaH,KAAb,CAAP;AACD;;;;;;;;IAGUI,mC;;;AAIX,+CAAmBT,QAAnB,EAAuD;AAAA;;AAAA,oCAHjB,CAGiB;;AAAA;;AACrD,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAMG,OAAO,GAAGT,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,CAAhB;AACAI,MAAAA,GAAG,CAACO,SAAJ,CAAcD,OAAd,EAAuBL,KAAvB;AACD;;;;;;;;IAGUO,Q;;;AAIX,oBAAmBZ,QAAnB,EAA2C;AAAA;;AAAA,oCAHL,CAGK;;AAAA;;AACzC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAEcC,G,EAA+B;AAC5C,UAAMY,CAAC,GAAGZ,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,IAA+Bc,sBAAzC;AACA,UAAMC,IAAI,GAAG,QAAQ,CAAC,CAACF,CAAC,GAAG,IAAL,MAAe,CAAf,GAAmB,CAAnB,GAAuB,CAAxB,KAA8BG,iBAAtC,CAAb;AACAf,MAAAA,GAAG,CAACC,SAAJ,CAAce,CAAd,IAAmB,IAAnB;AACAhB,MAAAA,GAAG,CAACC,SAAJ,CAAce,CAAd,IAAmBF,IAAnB;AACD;;;;;;;;IAGUG,O;;;;;;oCAC2B,C;;;;;4BAGpCjB,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,UAAIN,GAAG,CAACC,SAAJ,CAAciB,GAAlB,EAAuB;AACrB;AACAlB,QAAAA,GAAG,CAACC,SAAJ,CAAckB,EAAd,IAAoBf,KAApB;AACD;AACF;;;;;;;;IAGUgB,qB;;;;;;oCAC2B,C;;;;;4BAGpCpB,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,aAAO,kCAAsBF,KAAtB,CAAP;AACD;;;;;;;;IAGUiB,2B;;;;;;oCAC2B,E;;;;;4BAGpCrB,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAMG,OAAO,GAAGN,GAAG,CAACmB,iBAAJ,CAAsBtB,GAAG,CAACC,SAAJ,CAAckB,EAApC,CAAhB;AACAhB,MAAAA,GAAG,CAACO,SAAJ,CAAcD,OAAd,EAAuBL,KAAvB;AACAJ,MAAAA,GAAG,CAACC,SAAJ,CAAckB,EAAd,IAAoB,CAApB;AACD;;;;;;;;IAGUI,2B;;;;;;oCAC2B,E;;;;;4BAGpCvB,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAMG,OAAO,GAAGN,GAAG,CAACmB,iBAAJ,CAAsBtB,GAAG,CAACC,SAAJ,CAAckB,EAApC,CAAhB;AACAhB,MAAAA,GAAG,CAACqB,kBAAJ,CAAuBf,OAAvB,EAAgCL,KAAhC;AACAJ,MAAAA,GAAG,CAACC,SAAJ,CAAckB,EAAd,IAAoB,CAApB;AACD;;;;;;;;IAGUM,e;;;AAIX,2BAAmB1B,QAAnB,EAAuC;AAAA;;AAAA,oCAHD,CAGC;;AAAA;;AACrC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACDN,MAAAA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,IAA+BK,KAA/B;AACD;;;;;;;;IAGUsB,qC;;;;;;oCAE2B,C;;;;;4BAGpC1B,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAMqB,OAAO,GAAGxB,GAAG,CAACI,QAAJ,CAAaP,GAAG,CAACC,SAAJ,CAAckB,EAA3B,CAAhB;AACAhB,MAAAA,GAAG,CAACqB,kBAAJ,CAAuB,SAASG,OAAT,GAAmB,CAA1C,EAA6CvB,KAAK,IAAI,CAAtD;AACA,aAAOA,KAAP;AACD;;;;;;;;IAGUwB,oC;;;;;;oCAC2B,C;;;;;4BAGpC5B,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAMqB,OAAO,GAAGxB,GAAG,CAACI,QAAJ,CAAaP,GAAG,CAACC,SAAJ,CAAckB,EAA3B,CAAhB;AACAhB,MAAAA,GAAG,CAACqB,kBAAJ,CAAuB,SAASG,OAAhC,EAAyCvB,KAAK,GAAG,GAAjD;AACA,aAAOA,KAAP;AACD;;;;;;;;IAGUyB,8B;;;AAIX,0CAAmB9B,QAAnB,EAAuC;AAAA;;AAAA,oCAHD,CAGC;;AAAA;;AACrC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACDH,MAAAA,GAAG,CAACqB,kBAAJ,CAAuB,SAASxB,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,CAAhC,EAA8DK,KAA9D;AACD;;;;;;;;IAGU0B,a;;;;;;oCAC2B,C;;;;;4BAGpC9B,G,EACAG,G,EACAC,K,EACqB;AACrB,aAAOA,KAAP;AACD;;;;;;;;IAGU2B,uC;;;;;;oCAE2B,C;;;;;4BAGpC/B,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACDH,MAAAA,GAAG,CAACO,SAAJ,CAAcV,GAAG,CAACC,SAAJ,CAAc+B,EAAd,GAAmB,CAAjC,EAAoC5B,KAAK,IAAI,CAA7C;AACA,aAAOA,KAAP;AACD;;;;;;;;IAGU6B,sC;;;;;;oCAE2B,C;;;;;4BAGpCjC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACDH,MAAAA,GAAG,CAACO,SAAJ,CAAcV,GAAG,CAACC,SAAJ,CAAc+B,EAA5B,EAAgC5B,KAAK,GAAG,GAAxC;AACA,aAAOA,KAAP;AACD;;;;;;;;IAGU8B,W;;;AAKX,uBAAmBnC,QAAnB,EAAuCK,KAAvC,EAAyD;AAAA;;AAAA,oCAJnB,CAImB;;AAAA;;AAAA;;AACvD,SAAKL,QAAL,GAAgBA,QAAhB;AACA,SAAKK,KAAL,GAAaA,KAAb;AACD;;;;4BAEcJ,G,EAA+B;AAC5CA,MAAAA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,IAA+B,KAAKK,KAApC;AACD;;;;KAGH;;;;;IACa+B,W;;;;;;oCAC2B,C;;;;;4BAEvBnC,G,EAAUG,G,EAA+B;AACtD,UAAMiC,IAAI,GAAGjC,GAAG,CAACI,QAAJ,CAAaP,GAAG,CAACC,SAAJ,CAAckB,EAA3B,CAAb;AACAnB,MAAAA,GAAG,CAACC,SAAJ,CAAckB,EAAd;AACA,aAAOiB,IAAP;AACD;;;;;;;;IAGUC,e;;;;;;oCAC2B,C;;;;;4BAEvBrC,G,EAAUG,G,EAA+B;AACtD,UAAMiC,IAAI,GAAGjC,GAAG,CAACmB,iBAAJ,CAAsBtB,GAAG,CAACC,SAAJ,CAAckB,EAApC,CAAb;AACAnB,MAAAA,GAAG,CAACC,SAAJ,CAAckB,EAAd,IAAoB,CAApB;AACA,aAAOiB,IAAP;AACD;;;;;;;;IAGUE,iB;;;AAIX,6BAAmBvC,QAAnB,EAAuC;AAAA;;AAAA,oCAHD,CAGC;;AAAA;;AACrC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrBJ,MAAAA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB;AACA,aAAOK,KAAP;AACD;;;;;;;;IAGUmC,W;;;AAIX,uBAAmBxC,QAAnB,EAA2C;AAAA;;AAAA,oCAHL,CAGK;;AAAA;;AACzC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAEcC,G,EAA+B;AAC5CA,MAAAA,GAAG,CAACC,SAAJ,CAAcuC,CAAd,GAAkBxC,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,IAA+B,IAAjD;AACAC,MAAAA,GAAG,CAACC,SAAJ,CAAce,CAAd,GAAkBhB,GAAG,CAACC,SAAJ,CAAcuC,CAAd,GAAkB,IAAlB,GAAyB,IAA3C;AACD;;;;;;;;IAGUC,iB;;;AAIX,6BAAmB1C,QAAnB,EAAuC;AAAA;;AAAA,oCAHD,CAGC;;AAAA;;AACrC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrBJ,MAAAA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB;AACA,aAAOK,KAAP;AACD","sourcesContent":["import { Mmu } from \"../memory/mmu\";\nimport {\n  ByteRegister,\n  FLAG_Z,\n  FLAG_Z_MASK,\n  NonAfGroupedWordRegister,\n  Register\n} from \"./registers\";\nimport { ByteValue, WordValue, byteValueToSignedByte } from \"../types\";\nimport { Cpu, ClockCycles } from \".\";\n\nexport type LowLevelState = ByteValue | WordValue | undefined;\nexport type LowLevelStateReturn = ByteValue | WordValue | void;\n\n// Read16BitOperand // loads two bytes -> takes 8 cycles\n// LoadByteFromMemory // loads one byte -> takes 4 cycles\n// StoreToRegister(\"A\") // takes no extra cycles\n\n// TODO: Make all 0 or 4 cycles\n// TODO: Work on the fZ case which has different cycles depending on flag -\n//  might need to return cycles used\n\nexport interface LowLevelOperation {\n  readonly cycles: ClockCycles;\n  execute(cpu: Cpu, mmu: Mmu, value: LowLevelState): LowLevelStateReturn;\n}\n\nexport class LoadRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    return cpu.registers[this.register];\n  }\n}\n\nexport class ReadMemory implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    return mmu.readByte(value);\n  }\n}\n\nexport class WriteWordFromGroupedRegisterAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n  private readonly register: NonAfGroupedWordRegister;\n\n  public constructor(register: NonAfGroupedWordRegister) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address = cpu.registers[this.register];\n    mmu.writeByte(address, value);\n  }\n}\n\nexport class BitFlags implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    const t = cpu.registers[this.register] & FLAG_Z_MASK;\n    const flag = 0x20 + (((t & 0xff) === 0 ? 1 : 0) << FLAG_Z);\n    cpu.registers.f &= 0x10;\n    cpu.registers.f |= flag;\n  }\n}\n\nexport class JrCheck implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n\n    if (cpu.registers.fNz) {\n      // TODO: Becomes a longer cycle operation\n      cpu.registers.pc += value;\n    }\n  }\n}\n\nexport class WordValueToSignedByte implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n\n    return byteValueToSignedByte(value);\n  }\n}\n\nexport class WriteByteFromOperandAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 12;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address = mmu.readBigEndianWord(cpu.registers.pc);\n    mmu.writeByte(address, value);\n    cpu.registers.pc += 2;\n  }\n}\n\nexport class WriteWordFromOperandAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 16;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address = mmu.readBigEndianWord(cpu.registers.pc);\n    mmu.writeWordBigEndian(address, value);\n    cpu.registers.pc += 2;\n  }\n}\n\nexport class StoreInRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value not defined\");\n    }\n    cpu.registers[this.register] = value;\n  }\n}\n\nexport class WriteMemoryHighByteFromOperandAddress\n  implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const operand = mmu.readByte(cpu.registers.pc);\n    mmu.writeWordBigEndian(0xff00 + operand + 1, value >> 8);\n    return value;\n  }\n}\n\nexport class WriteMemoryLowByteFromOperandAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const operand = mmu.readByte(cpu.registers.pc);\n    mmu.writeWordBigEndian(0xff00 + operand, value & 255);\n    return value;\n  }\n}\n\nexport class WriteMemoryFromRegisterAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeWordBigEndian(0xff00 + cpu.registers[this.register], value);\n  }\n}\n\nexport class InternalDelay implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    return value;\n  }\n}\n\nexport class WriteMemoryWordHighByteFromStackPointer\nimplements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeByte(cpu.registers.sp + 1, value >> 8);\n    return value;\n  }\n}\n\nexport class WriteMemoryWordLowByteFromStackPointer\nimplements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeByte(cpu.registers.sp, value & 255);\n    return value;\n  }\n}\n\nexport class SetRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n  private readonly value: WordValue;\n\n  public constructor(register: Register, value: WordValue) {\n    this.register = register;\n    this.value = value;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    cpu.registers[this.register] = this.value;\n  }\n}\n\n// TODO: Can be done in terms of lower level ops\nexport class LoadOperand implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(cpu: Cpu, mmu: Mmu): LowLevelStateReturn {\n    const byte = mmu.readByte(cpu.registers.pc);\n    cpu.registers.pc++;\n    return byte;\n  }\n}\n\nexport class LoadWordOperand implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 8;\n\n  public execute(cpu: Cpu, mmu: Mmu): LowLevelStateReturn {\n    const byte = mmu.readBigEndianWord(cpu.registers.pc);\n    cpu.registers.pc += 2;\n    return byte;\n  }\n}\n\nexport class IncrementRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers[this.register]++;\n    return value;\n  }\n}\n\nexport class XOrRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    cpu.registers.a = cpu.registers[this.register] & 0xff;\n    cpu.registers.f = cpu.registers.a ? 0x00 : 0x80;\n  }\n}\n\nexport class DecrementRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers[this.register]--;\n    return value;\n  }\n}\n"],"file":"lowLevel.js"}