{"version":3,"sources":["../../src/cpu/lowLevel.ts"],"names":["LoadRegister","register","cpu","registers","CompareToRegister","mmu","value","undefined","Error","previous","next","setFFromParts","RotateLeftThroughCarry","newFC","newValue","fC","newF","FLAG_C_MASK","FLAG_Z_MASK","f","ReadMemoryWord","readByte","ReadMemory","BitFlags","position","bit","fZ","fN","fH","CHECK_FLAGS","SetToPcIfFlag","flag","pc","AddToPcIfFlag","ByteValueToSignedByte","WriteByteFromOperandAddress","address","writeByte","WriteWordFromOperandAddress","AddToRegister","StoreInRegister","WriteMemoryHighByteFromOperandAddress","operand","WriteMemoryLowByteFromOperandAddress","WriteMemoryFromRegisterAddress","add","InternalDelay","WriteMemoryWordHighByteFromStackPointer","sp","WriteMemoryWordLowByteFromStackPointer","SetRegister","AddWithCarryToA","result","a","AddToValue","amount","LoadOperand","byte","LoadWordOperandHighByte","IncrementWordRegisterWithFlags","setFHFromWordAdd","IncrementByteRegisterWithFlags","setFHFromByteAdd","IncrementRegister","XOrRegister","F_Z_SET","DecrementByteRegisterWithFlags","setFHFromByteSubtract","DecrementRegister"],"mappings":"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","sourcesContent":["import { Mmu } from \"../memory/mmu\";\nimport {\n  ByteRegister,\n  calculateFHFromByteAdd,\n  FLAG_C_MASK,\n  FLAG_Z_MASK,\n  Register,\n  WordRegister\n} from \"./registers\";\nimport { ByteValue, WordValue, BitValue, ByteBitPosition } from \"../types\";\nimport { Cpu, ClockCycles } from \".\";\nimport { byteValueToSignedByte } from \"../utils/numberUtils\";\n\nexport type LowLevelState = ByteValue | WordValue | undefined;\nexport type LowLevelStateReturn = ByteValue | WordValue | void;\n\n// TODO: Make all 0 or 4 cycles\n// TODO: Work on the fZ case which has different cycles depending on flag -\n//  might need to return cycles used\n\nexport interface LowLevelOp {\n  readonly cycles: ClockCycles;\n  execute(cpu: Cpu, mmu: Mmu, value: LowLevelState): LowLevelStateReturn;\n}\n\nexport class LoadRegister implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    return cpu.registers[this.register];\n  }\n}\n\nexport class CompareToRegister implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"Undefined value\");\n    }\n    const previous = cpu.registers[this.register];\n    const next = previous - value;\n    cpu.registers.setFFromParts(\n      next === 0x00,\n      1,\n      (previous & 0xf) - (value & 0xf) < 0,\n      next < 0\n    );\n    return next;\n  }\n}\n\nexport class RotateLeftThroughCarry implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    const newFC: BitValue =\n      (cpu.registers[this.register] & (1 << 7)) !== 0 ? 1 : 0;\n    const newValue = (cpu.registers[this.register] << 1) + cpu.registers.fC;\n    cpu.registers[this.register] = newValue;\n    let newF = 0x00;\n    if (newFC === 1) {\n      newF |= FLAG_C_MASK;\n    } else {\n      newF &= ~FLAG_C_MASK;\n    }\n    if (newValue === 0) {\n      newF |= FLAG_Z_MASK;\n    }\n    cpu.registers.f = newF;\n  }\n}\n\n/**\n * @deprecated Split up\n */\nexport class ReadMemoryWord implements LowLevelOp {\n  public readonly cycles: ClockCycles = 8;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    return (mmu.readByte(value + 1) << 8) + mmu.readByte(value);\n  }\n}\n\nexport class ReadMemory implements LowLevelOp {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    return mmu.readByte(value);\n  }\n}\n\nexport class BitFlags implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly position: ByteBitPosition;\n\n  public constructor(position: ByteBitPosition) {\n    this.position = position;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const bit = value & (1 << this.position);\n    cpu.registers.fZ = bit === 0 ? 1 : 0;\n    cpu.registers.fN = 0;\n    cpu.registers.fH = 1;\n  }\n}\n\nexport type CheckFlag = \"fNz\" | \"fZ\" | \"fC\" | \"fNc\";\nexport const CHECK_FLAGS: ReadonlyArray<CheckFlag> = [\"fNz\", \"fZ\", \"fC\", \"fNc\"];\n\nexport class SetToPcIfFlag implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly flag: CheckFlag;\n\n  public constructor(flag: CheckFlag) {\n    this.flag = flag;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n\n    if (cpu.registers[this.flag]) {\n      cpu.registers.pc = value;\n    }\n  }\n}\n\nexport class AddToPcIfFlag implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly flag: CheckFlag;\n\n  public constructor(flag: CheckFlag) {\n    this.flag = flag;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n\n    if (cpu.registers[this.flag]) {\n      cpu.registers.pc += value;\n    }\n  }\n}\n\nexport class ByteValueToSignedByte implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n\n    return byteValueToSignedByte(value);\n  }\n}\n\n/**\n * @deprecated should be split\n */\nexport class WriteByteFromOperandAddress implements LowLevelOp {\n  public readonly cycles: ClockCycles = 12;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address =\n      (mmu.readByte(cpu.registers.pc + 1) << 8) +\n      mmu.readByte(cpu.registers.pc);\n    mmu.writeByte(address, value);\n    cpu.registers.pc += 2;\n  }\n}\n\n/**\n * @deprecated should be split\n */\nexport class WriteWordFromOperandAddress implements LowLevelOp {\n  public readonly cycles: ClockCycles = 16;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address =\n      (mmu.readByte(cpu.registers.pc + 1) << 8) +\n      mmu.readByte(cpu.registers.pc);\n    mmu.writeByte(address + 1, value >> 8);\n    mmu.writeByte(address, value & 255);\n    cpu.registers.pc += 2;\n  }\n}\n\nexport class AddToRegister implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value not defined\");\n    }\n    cpu.registers[this.register] += value;\n  }\n}\n\nexport class StoreInRegister implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value not defined\");\n    }\n    cpu.registers[this.register] = value;\n  }\n}\n\nexport class WriteMemoryHighByteFromOperandAddress implements LowLevelOp {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const operand = mmu.readByte(cpu.registers.pc);\n    mmu.writeByte(0xff00 + operand + 1, value >> 8);\n    return value;\n  }\n}\n\nexport class WriteMemoryLowByteFromOperandAddress implements LowLevelOp {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const operand = mmu.readByte(cpu.registers.pc);\n    mmu.writeByte(0xff00 + operand, value & 0xff);\n    return value;\n  }\n}\n\nexport class WriteMemoryFromRegisterAddress implements LowLevelOp {\n  public readonly cycles: ClockCycles = 4;\n  private readonly register: Register;\n  private readonly add: WordValue;\n\n  public constructor(register: Register, add: WordValue = 0x0000) {\n    this.register = register;\n    this.add = add;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeByte(cpu.registers[this.register] + this.add, value);\n  }\n}\n\nexport class InternalDelay implements LowLevelOp {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    return value;\n  }\n}\n\nexport class WriteMemoryWordHighByteFromStackPointer implements LowLevelOp {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeByte(cpu.registers.sp + 1, value >> 8);\n    return value;\n  }\n}\n\nexport class WriteMemoryWordLowByteFromStackPointer implements LowLevelOp {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeByte(cpu.registers.sp, value & 0xff);\n    return value;\n  }\n}\n\nexport class SetRegister implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n  private readonly value: WordValue;\n\n  public constructor(register: Register, value: WordValue) {\n    this.register = register;\n    this.value = value;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    cpu.registers[this.register] = this.value;\n  }\n}\n\nexport class AddWithCarryToA implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const result = cpu.registers.a + value + cpu.registers.fC;\n    cpu.registers.setFFromParts(\n      result === 0x100 ? 1 : 0,\n      0,\n      calculateFHFromByteAdd(cpu.registers.a, value + cpu.registers.fC),\n      result > 0xff ? 1 : 0\n    );\n    cpu.registers.a = result;\n  }\n}\n\nexport class AddToValue implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly amount: WordValue | ByteValue;\n\n  public constructor(amount: WordValue | ByteValue) {\n    this.amount = amount;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    return value + this.amount;\n  }\n}\n\nexport class LoadOperand implements LowLevelOp {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(cpu: Cpu, mmu: Mmu): LowLevelStateReturn {\n    const byte = mmu.readByte(cpu.registers.pc);\n    cpu.registers.pc++;\n    return byte;\n  }\n}\n\nexport class LoadWordOperandHighByte implements LowLevelOp {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const byte = mmu.readByte(cpu.registers.pc);\n    cpu.registers.pc++;\n    return (byte << 8) + value;\n  }\n}\n\nexport class IncrementWordRegisterWithFlags implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: WordRegister;\n\n  public constructor(register: WordRegister) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers.setFHFromWordAdd(cpu.registers[this.register], 1);\n    cpu.registers[this.register]++;\n    cpu.registers.fZ = cpu.registers[this.register] === 0x0000 ? 1 : 0;\n    cpu.registers.fN = 0;\n    return value;\n  }\n}\n\nexport class IncrementByteRegisterWithFlags implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers.setFHFromByteAdd(cpu.registers[this.register], 1);\n    cpu.registers[this.register]++;\n    cpu.registers.fZ = cpu.registers[this.register] === 0x00 ? 1 : 0;\n    cpu.registers.fN = 0;\n    return value;\n  }\n}\n\nexport class IncrementRegister implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers[this.register]++;\n    return value;\n  }\n}\n\nexport class XOrRegister implements LowLevelOp {\n  private static readonly F_Z_SET: number = 0b10000000;\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    cpu.registers.a ^= cpu.registers[this.register];\n    cpu.registers.f = cpu.registers.a ? 0x00 : XOrRegister.F_Z_SET;\n  }\n}\n\nexport class DecrementByteRegisterWithFlags implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers.setFHFromByteSubtract(cpu.registers[this.register], 1);\n    cpu.registers[this.register]--;\n    cpu.registers.fZ = cpu.registers[this.register] === 0x00 ? 1 : 0;\n    cpu.registers.fN = 1;\n    return value;\n  }\n}\n\nexport class DecrementRegister implements LowLevelOp {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers[this.register]--;\n    return value;\n  }\n}\n"],"file":"lowLevel.js"}