{"version":3,"sources":["../../src/cpu/lowLevel.ts"],"names":["LoadRegister","register","cpu","registers","RotateLeft","mmu","value","t","fC","flag","fZ","f","ReadMemoryWord","undefined","Error","readBigEndianWord","ReadMemory","readByte","WriteWordFromGroupedRegisterAddress","address","writeByte","BitFlags","FLAG_Z_MASK","FLAG_Z","JrCheck","fNz","pc","WordValueToSignedByte","WriteByteFromOperandAddress","WriteWordFromOperandAddress","writeWordBigEndian","StoreInRegister","WriteMemoryHighByteFromOperandAddress","operand","WriteMemoryLowByteFromOperandAddress","WriteMemoryFromRegisterAddress","InternalDelay","WriteMemoryWordHighByteFromStackPointer","sp","WriteMemoryWordLowByteFromStackPointer","SetRegister","LoadOperand","byte","LoadWordOperand","IncrementRegister","XOrRegister","a","DecrementRegister"],"mappings":";;;;;;;AACA;;AAOA;;;;;;;;;;IAmBaA,Y;;;AAIX,wBAAmBC,QAAnB,EAAuC;AAAA;;AAAA,oCAHD,CAGC;;AAAA;;AACrC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAEcC,G,EAA+B;AAC5C,aAAOA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,CAAP;AACD;;;;;;;;IAGUG,U;;;AAIX,sBAAmBH,QAAnB,EAA2C;AAAA;;AAAA,oCAHL,CAGK;;AAAA;;AACzC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIC,CAAS,GAAG,CAACL,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,KAAgC,CAAjC,IAAsCC,GAAG,CAACC,SAAJ,CAAcK,EAApE;AACA,UAAIC,IAAI,GAAG,IAAX;AACAA,MAAAA,IAAI,IAAI,CAAE,CAACF,CAAC,GAAG,IAAL,MAAe,CAAhB,GAAqB,CAArB,GAAyB,CAA1B,KAAgCL,GAAG,CAACC,SAAJ,CAAcO,EAAtD;AACAD,MAAAA,IAAI,IAAI,CAACF,CAAC,GAAG,IAAJ,GAAW,CAAX,GAAe,CAAhB,KAAsBL,GAAG,CAACC,SAAJ,CAAcK,EAA5C;AACAN,MAAAA,GAAG,CAACC,SAAJ,CAAcQ,CAAd,IAAmB,IAAnB;AACAT,MAAAA,GAAG,CAACC,SAAJ,CAAcQ,CAAd,IAAmBF,IAAnB;AACAF,MAAAA,CAAC,IAAI,IAAL;AACAL,MAAAA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,IAA+BM,CAA/B;AACD;;;;;;;;IAGUK,c;;;;;;oCAC2B,C;;;;;4BAGpCV,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,aAAOT,GAAG,CAACU,iBAAJ,CAAsBT,KAAtB,CAAP;AACD;;;;;;;;IAGUU,U;;;;;;oCAC2B,C;;;;;4BAGpCd,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,aAAOT,GAAG,CAACY,QAAJ,CAAaX,KAAb,CAAP;AACD;;;;;;;;IAGUY,mC;;;AAIX,+CAAmBjB,QAAnB,EAAuD;AAAA;;AAAA,oCAHjB,CAGiB;;AAAA;;AACrD,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAMK,OAAO,GAAGjB,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,CAAhB;AACAI,MAAAA,GAAG,CAACe,SAAJ,CAAcD,OAAd,EAAuBb,KAAvB;AACD;;;;;;;;IAGUe,Q;;;AAIX,oBAAmBpB,QAAnB,EAA2C;AAAA;;AAAA,oCAHL,CAGK;;AAAA;;AACzC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAEcC,G,EAA+B;AAC5C,UAAMK,CAAC,GAAGL,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,IAA+BqB,sBAAzC;AACA,UAAMb,IAAI,GAAG,QAAQ,CAAC,CAACF,CAAC,GAAG,IAAL,MAAe,CAAf,GAAmB,CAAnB,GAAuB,CAAxB,KAA8BgB,iBAAtC,CAAb;AACArB,MAAAA,GAAG,CAACC,SAAJ,CAAcQ,CAAd,IAAmB,IAAnB;AACAT,MAAAA,GAAG,CAACC,SAAJ,CAAcQ,CAAd,IAAmBF,IAAnB;AACD;;;;;;;;IAGUe,O;;;;;;oCAC2B,C;;;;;4BAGpCtB,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,UAAIZ,GAAG,CAACC,SAAJ,CAAcsB,GAAlB,EAAuB;AACrB;AACAvB,QAAAA,GAAG,CAACC,SAAJ,CAAcuB,EAAd,IAAoBpB,KAApB;AACD;AACF;;;;;;;;IAGUqB,qB;;;;;;oCAC2B,C;;;;;4BAGpCzB,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,aAAO,kCAAsBR,KAAtB,CAAP;AACD;;;;;AAGH;;;;;;;IAGasB,2B;;;;;;oCAC2B,E;;;;;4BAGpC1B,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAMK,OAAO,GAAGd,GAAG,CAACU,iBAAJ,CAAsBb,GAAG,CAACC,SAAJ,CAAcuB,EAApC,CAAhB;AACArB,MAAAA,GAAG,CAACe,SAAJ,CAAcD,OAAd,EAAuBb,KAAvB;AACAJ,MAAAA,GAAG,CAACC,SAAJ,CAAcuB,EAAd,IAAoB,CAApB;AACD;;;;;AAGH;;;;;;;IAGaG,2B;;;;;;oCAC2B,E;;;;;4BAGpC3B,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAMK,OAAO,GAAGd,GAAG,CAACU,iBAAJ,CAAsBb,GAAG,CAACC,SAAJ,CAAcuB,EAApC,CAAhB;AACArB,MAAAA,GAAG,CAACyB,kBAAJ,CAAuBX,OAAvB,EAAgCb,KAAhC;AACAJ,MAAAA,GAAG,CAACC,SAAJ,CAAcuB,EAAd,IAAoB,CAApB;AACD;;;;;;;;IAGUK,e;;;AAIX,2BAAmB9B,QAAnB,EAAuC;AAAA;;AAAA,oCAHD,CAGC;;AAAA;;AACrC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACDZ,MAAAA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,IAA+BK,KAA/B;AACD;;;;;;;;IAGU0B,qC;;;;;;oCAE2B,C;;;;;4BAGpC9B,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAMmB,OAAO,GAAG5B,GAAG,CAACY,QAAJ,CAAaf,GAAG,CAACC,SAAJ,CAAcuB,EAA3B,CAAhB;AACArB,MAAAA,GAAG,CAACe,SAAJ,CAAc,SAASa,OAAT,GAAmB,CAAjC,EAAoC3B,KAAK,IAAI,CAA7C;AACA,aAAOA,KAAP;AACD;;;;;;;;IAGU4B,oC;;;;;;oCAC2B,C;;;;;4BAGpChC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAMmB,OAAO,GAAG5B,GAAG,CAACY,QAAJ,CAAaf,GAAG,CAACC,SAAJ,CAAcuB,EAA3B,CAAhB;AACArB,MAAAA,GAAG,CAACe,SAAJ,CAAc,SAASa,OAAvB,EAAgC3B,KAAK,GAAG,GAAxC;AACA,aAAOA,KAAP;AACD;;;;;;;;IAGU6B,8B;;;AAIX,0CAAmBlC,QAAnB,EAAuC;AAAA;;AAAA,oCAHD,CAGC;;AAAA;;AACrC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACDT,MAAAA,GAAG,CAACyB,kBAAJ,CAAuB,SAAS5B,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,CAAhC,EAA8DK,KAA9D;AACD;;;;;;;;IAGU8B,a;;;;;;oCAC2B,C;;;;;4BAGpClC,G,EACAG,G,EACAC,K,EACqB;AACrB,aAAOA,KAAP;AACD;;;;;;;;IAGU+B,uC;;;;;;oCAE2B,C;;;;;4BAGpCnC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACDT,MAAAA,GAAG,CAACe,SAAJ,CAAclB,GAAG,CAACC,SAAJ,CAAcmC,EAAd,GAAmB,CAAjC,EAAoChC,KAAK,IAAI,CAA7C;AACA,aAAOA,KAAP;AACD;;;;;;;;IAGUiC,sC;;;;;;oCAE2B,C;;;;;4BAGpCrC,G,EACAG,G,EACAC,K,EACqB;AACrB,UAAIA,KAAK,KAAKO,SAAd,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACDT,MAAAA,GAAG,CAACe,SAAJ,CAAclB,GAAG,CAACC,SAAJ,CAAcmC,EAA5B,EAAgChC,KAAK,GAAG,GAAxC;AACA,aAAOA,KAAP;AACD;;;;;;;;IAGUkC,W;;;AAKX,uBAAmBvC,QAAnB,EAAuCK,KAAvC,EAAyD;AAAA;;AAAA,oCAJnB,CAImB;;AAAA;;AAAA;;AACvD,SAAKL,QAAL,GAAgBA,QAAhB;AACA,SAAKK,KAAL,GAAaA,KAAb;AACD;;;;4BAEcJ,G,EAA+B;AAC5CA,MAAAA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,IAA+B,KAAKK,KAApC;AACD;;;;KAGH;;;;;IACamC,W;;;;;;oCAC2B,C;;;;;4BAEvBvC,G,EAAUG,G,EAA+B;AACtD,UAAMqC,IAAI,GAAGrC,GAAG,CAACY,QAAJ,CAAaf,GAAG,CAACC,SAAJ,CAAcuB,EAA3B,CAAb;AACAxB,MAAAA,GAAG,CAACC,SAAJ,CAAcuB,EAAd;AACA,aAAOgB,IAAP;AACD;;;;;AAGH;;;;;;;IAGaC,e;;;;;;oCAC2B,C;;;;;4BAEvBzC,G,EAAUG,G,EAA+B;AACtD,UAAMqC,IAAI,GAAGrC,GAAG,CAACU,iBAAJ,CAAsBb,GAAG,CAACC,SAAJ,CAAcuB,EAApC,CAAb;AACAxB,MAAAA,GAAG,CAACC,SAAJ,CAAcuB,EAAd,IAAoB,CAApB;AACA,aAAOgB,IAAP;AACD;;;;;;;;IAGUE,iB;;;AAIX,6BAAmB3C,QAAnB,EAAuC;AAAA;;AAAA,oCAHD,CAGC;;AAAA;;AACrC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrBJ,MAAAA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB;AACA,aAAOK,KAAP;AACD;;;;;;;;IAGUuC,W;;;AAIX,uBAAmB5C,QAAnB,EAA2C;AAAA;;AAAA,oCAHL,CAGK;;AAAA;;AACzC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAEcC,G,EAA+B;AAC5CA,MAAAA,GAAG,CAACC,SAAJ,CAAc2C,CAAd,GAAkB5C,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB,IAA+B,IAAjD;AACAC,MAAAA,GAAG,CAACC,SAAJ,CAAcQ,CAAd,GAAkBT,GAAG,CAACC,SAAJ,CAAc2C,CAAd,GAAkB,IAAlB,GAAyB,IAA3C;AACD;;;;;;;;IAGUC,iB;;;AAIX,6BAAmB9C,QAAnB,EAAuC;AAAA;;AAAA,oCAHD,CAGC;;AAAA;;AACrC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;4BAGCC,G,EACAG,G,EACAC,K,EACqB;AACrBJ,MAAAA,GAAG,CAACC,SAAJ,CAAc,KAAKF,QAAnB;AACA,aAAOK,KAAP;AACD","sourcesContent":["import { Mmu } from \"../memory/mmu\";\nimport {\n  ByteRegister,\n  FLAG_Z,\n  FLAG_Z_MASK,\n  NonAfGroupedWordRegister,\n  Register\n} from \"./registers\";\nimport { ByteValue, WordValue, byteValueToSignedByte } from \"../types\";\nimport { Cpu, ClockCycles } from \".\";\n\nexport type LowLevelState = ByteValue | WordValue | undefined;\nexport type LowLevelStateReturn = ByteValue | WordValue | void;\n\n// Read16BitOperand // loads two bytes -> takes 8 cycles\n// LoadByteFromMemory // loads one byte -> takes 4 cycles\n// StoreToRegister(\"A\") // takes no extra cycles\n\n// TODO: Make all 0 or 4 cycles\n// TODO: Work on the fZ case which has different cycles depending on flag -\n//  might need to return cycles used\n\nexport interface LowLevelOperation {\n  readonly cycles: ClockCycles;\n  execute(cpu: Cpu, mmu: Mmu, value: LowLevelState): LowLevelStateReturn;\n}\n\nexport class LoadRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    return cpu.registers[this.register];\n  }\n}\n\nexport class RotateLeft implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    let t: number = (cpu.registers[this.register] << 1) + cpu.registers.fC;\n    let flag = 0x00;\n    flag += (((t & 0xFF) === 0) ? 1 : 0) << cpu.registers.fZ;\n    flag += (t > 0xFF ? 1 : 0) << cpu.registers.fC;\n    cpu.registers.f &= 0x00;\n    cpu.registers.f |= flag;\n    t &= 0xFF;\n    cpu.registers[this.register] = t;\n  }\n}\n\nexport class ReadMemoryWord implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 8;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    return mmu.readBigEndianWord(value);\n  }\n}\n\nexport class ReadMemory implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    return mmu.readByte(value);\n  }\n}\n\nexport class WriteWordFromGroupedRegisterAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n  private readonly register: NonAfGroupedWordRegister;\n\n  public constructor(register: NonAfGroupedWordRegister) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address = cpu.registers[this.register];\n    mmu.writeByte(address, value);\n  }\n}\n\nexport class BitFlags implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    const t = cpu.registers[this.register] & FLAG_Z_MASK;\n    const flag = 0x20 + (((t & 0xff) === 0 ? 1 : 0) << FLAG_Z);\n    cpu.registers.f &= 0x10;\n    cpu.registers.f |= flag;\n  }\n}\n\nexport class JrCheck implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n\n    if (cpu.registers.fNz) {\n      // TODO: Becomes a longer cycle operation\n      cpu.registers.pc += value;\n    }\n  }\n}\n\nexport class WordValueToSignedByte implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n\n    return byteValueToSignedByte(value);\n  }\n}\n\n/**\n * @deprecated should be split\n */\nexport class WriteByteFromOperandAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 12;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address = mmu.readBigEndianWord(cpu.registers.pc);\n    mmu.writeByte(address, value);\n    cpu.registers.pc += 2;\n  }\n}\n\n/**\n * @deprecated should be split\n */\nexport class WriteWordFromOperandAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 16;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const address = mmu.readBigEndianWord(cpu.registers.pc);\n    mmu.writeWordBigEndian(address, value);\n    cpu.registers.pc += 2;\n  }\n}\n\nexport class StoreInRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value not defined\");\n    }\n    cpu.registers[this.register] = value;\n  }\n}\n\nexport class WriteMemoryHighByteFromOperandAddress\n  implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const operand = mmu.readByte(cpu.registers.pc);\n    mmu.writeByte(0xff00 + operand + 1, value >> 8);\n    return value;\n  }\n}\n\nexport class WriteMemoryLowByteFromOperandAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    const operand = mmu.readByte(cpu.registers.pc);\n    mmu.writeByte(0xff00 + operand, value & 255);\n    return value;\n  }\n}\n\nexport class WriteMemoryFromRegisterAddress implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeWordBigEndian(0xff00 + cpu.registers[this.register], value);\n  }\n}\n\nexport class InternalDelay implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    return value;\n  }\n}\n\nexport class WriteMemoryWordHighByteFromStackPointer\nimplements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeByte(cpu.registers.sp + 1, value >> 8);\n    return value;\n  }\n}\n\nexport class WriteMemoryWordLowByteFromStackPointer\nimplements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    if (value === undefined) {\n      throw new Error(\"value undefined\");\n    }\n    mmu.writeByte(cpu.registers.sp, value & 255);\n    return value;\n  }\n}\n\nexport class SetRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n  private readonly value: WordValue;\n\n  public constructor(register: Register, value: WordValue) {\n    this.register = register;\n    this.value = value;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    cpu.registers[this.register] = this.value;\n  }\n}\n\n// TODO: Can be done in terms of lower level ops\nexport class LoadOperand implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 4;\n\n  public execute(cpu: Cpu, mmu: Mmu): LowLevelStateReturn {\n    const byte = mmu.readByte(cpu.registers.pc);\n    cpu.registers.pc++;\n    return byte;\n  }\n}\n\n/**\n * @deprecated should be split\n */\nexport class LoadWordOperand implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 8;\n\n  public execute(cpu: Cpu, mmu: Mmu): LowLevelStateReturn {\n    const byte = mmu.readBigEndianWord(cpu.registers.pc);\n    cpu.registers.pc += 2;\n    return byte;\n  }\n}\n\nexport class IncrementRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers[this.register]++;\n    return value;\n  }\n}\n\nexport class XOrRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: ByteRegister;\n\n  public constructor(register: ByteRegister) {\n    this.register = register;\n  }\n\n  public execute(cpu: Cpu): LowLevelStateReturn {\n    cpu.registers.a = cpu.registers[this.register] & 0xff;\n    cpu.registers.f = cpu.registers.a ? 0x00 : 0x80;\n  }\n}\n\nexport class DecrementRegister implements LowLevelOperation {\n  public readonly cycles: ClockCycles = 0;\n  private readonly register: Register;\n\n  public constructor(register: Register) {\n    this.register = register;\n  }\n\n  public execute(\n    cpu: Cpu,\n    mmu: Mmu,\n    value: LowLevelState\n  ): LowLevelStateReturn {\n    cpu.registers[this.register]--;\n    return value;\n  }\n}\n"],"file":"lowLevel.js"}