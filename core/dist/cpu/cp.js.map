{"version":3,"sources":["../../src/cpu/cp.ts"],"names":["createCpR","opCode","register","InstructionDefinition","loadRegister","compareToRegister","createCpMHl","readMemory","createCpN","loadByteOperand"],"mappings":";;;;;;;AAAA;;AAGO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CACvBC,MADuB,EAEvBC,QAFuB;AAAA,SAIvB,IAAIC,mCAAJ,CAA0BF,MAA1B,eAAwCC,QAAxC,GACGE,YADH,CACgBF,QADhB,EAEGG,iBAFH,CAEqB,GAFrB,CAJuB;AAAA,CAAlB;;;;AAQA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACL,MAAD;AAAA,SACzB,IAAIE,mCAAJ,CAA0BF,MAA1B,aACGG,YADH,CACgB,IADhB,EAEGG,UAFH,GAGGF,iBAHH,CAGqB,GAHrB,CADyB;AAAA,CAApB;;;;AAMA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACP,MAAD;AAAA,SACvB,IAAIE,mCAAJ,CAA0BF,MAA1B,UACGQ,eADH,GAEGJ,iBAFH,CAEqB,GAFrB,CADuB;AAAA,CAAlB","sourcesContent":["import { Instruction, InstructionDefinition, OpCode } from \"./instructions\";\nimport { ByteRegister } from \"./registers\";\n\nexport const createCpR = (\n  opCode: OpCode,\n  register: ByteRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `CP ${register}`)\n    .loadRegister(register)\n    .compareToRegister(\"a\");\n\nexport const createCpMHl = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `CP (hl)`)\n    .loadRegister(\"hl\")\n    .readMemory()\n    .compareToRegister(\"a\");\n\nexport const createCpN = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `CP n`)\n    .loadByteOperand()\n    .compareToRegister(\"a\");\n"],"file":"cp.js"}