{"version":3,"sources":["../../src/cpu/cb.ts"],"names":["CbInstruction","opCode","cpu","mmu","operand","readByte","registers","pc","subInstruction","CB_INSTRUCTIONS","Error","execute","createCb","createCbBitBR","position","register","InstructionDefinition","loadRegister","bitFlags","createCbBitBMHl","readMemory","map","i"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,a;;;AAIJ,yBAAmBC,MAAnB,EAAmC;AAAA;;AAAA;;AAAA,mCAFH,IAEG;;AACjC,SAAKA,MAAL,GAAcA,MAAd;AACD;;;;4BAEcC,G,EAAUC,G,EAAuB;AAC9C,UAAMC,OAAO,GAAGD,GAAG,CAACE,QAAJ,CAAaH,GAAG,CAACI,SAAJ,CAAcC,EAA3B,CAAhB,CAD8C,CAE9C;;AACA,UAAMC,cAAc,GAAGC,eAAe,CAACL,OAAD,CAAtC;;AACA,UAAI,CAACI,cAAL,EAAqB;AACnB,cAAM,IAAIE,KAAJ,wCAC4B,4BAAgBN,OAAhB,CAD5B,EAAN;AAGD;;AACDF,MAAAA,GAAG,CAACI,SAAJ,CAAcC,EAAd;AACAC,MAAAA,cAAc,CAACG,OAAf,CAAuBT,GAAvB,EAA4BC,GAA5B;AACA,aAAO,CAAP;AACD;;;;;;AAGI,IAAMS,QAAQ,GAAG,SAAXA,QAAW,CAACX,MAAD;AAAA,SACtB,IAAID,aAAJ,CAAkBC,MAAlB,CADsB;AAAA,CAAjB;;;;AAGA,IAAMY,aAAa,GAAG,SAAhBA,aAAgB,CAC3BZ,MAD2B,EAE3Ba,QAF2B,EAG3BC,QAH2B;AAAA,SAK3B,IAAIC,mCAAJ,CAA0Bf,MAA1B,gBAAyCa,QAAzC,eAAsDC,QAAtD,GACGE,YADH,CACgBF,QADhB,EAEGG,QAFH,CAEYJ,QAFZ,CAL2B;AAAA,CAAtB;;;;AASA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAC7BlB,MAD6B,EAE7Ba,QAF6B;AAAA,SAI7B,IAAIE,mCAAJ,CAA0Bf,MAA1B,gBAAyCa,QAAzC,aACGG,YADH,CACgB,IADhB,EAEGG,UAFH,GAGGF,QAHH,CAGYJ,QAHZ,CAJ6B;AAAA,CAAxB;;;AASP,IAAML,eAAkD,GAAG,uBACzD,6BACM,CACF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CADE,EAEF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAFE,EAGF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAHE,EAIF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAJE,EAKF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CALE,EAMF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CANE,EAOF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAPE,EASF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CATE,EAUF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAVE,EAWF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAXE,EAYF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAZE,EAaF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAbE,EAcF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAdE,EAeF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAfE,EAiBF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAjBE,EAkBF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAlBE,EAmBF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAnBE,EAoBF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CApBE,EAqBF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CArBE,EAsBF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAtBE,EAuBF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAvBE,EAyBF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAzBE,EA0BF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA1BE,EA2BF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA3BE,EA4BF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA5BE,EA6BF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA7BE,EA8BF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA9BE,EA+BF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA/BE,EAiCF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAjCE,EAkCF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAlCE,EAmCF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAnCE,EAoCF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CApCE,EAqCF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CArCE,EAsCF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAtCE,EAuCF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAvCE,EAyCF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAzCE,EA0CF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA1CE,EA2CF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA3CE,EA4CF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA5CE,EA6CF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA7CE,EA8CF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA9CE,EA+CF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA/CE,EAiDF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAjDE,EAkDF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAlDE,EAmDF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAnDE,EAoDF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CApDE,EAqDF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CArDE,EAsDF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAtDE,EAuDF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAvDE,EAyDF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CAzDE,EA0DF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA1DE,EA2DF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA3DE,EA4DF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA5DE,EA6DF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA7DE,EA8DF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA9DE,EA+DF,CAAC,IAAD,EAAO,CAAP,EAAU,GAAV,CA/DE,CAAD,CAgE0DY,GAhE1D,CAiED;AAAA;AAAA,MAAEpB,MAAF;AAAA,MAAUa,QAAV;AAAA,MAAoBC,QAApB;;AAAA,SACEF,aAAa,CAACZ,MAAD,EAASa,QAAT,EAAmBC,QAAnB,CADf;AAAA,CAjEC,CADL,sBAuEM,CACF,CAAC,IAAD,EAAO,CAAP,CADE,EAEF,CAAC,IAAD,EAAO,CAAP,CAFE,EAGF,CAAC,IAAD,EAAO,CAAP,CAHE,EAIF,CAAC,IAAD,EAAO,CAAP,CAJE,EAKF,CAAC,IAAD,EAAO,CAAP,CALE,EAMF,CAAC,IAAD,EAAO,CAAP,CANE,EAOF,CAAC,IAAD,EAAO,CAAP,CAPE,EAQF,CAAC,IAAD,EAAO,CAAP,CARE,CAAD,CAS4CM,GAT5C,CAUD;AAAA;AAAA,MAAEpB,MAAF;AAAA,MAAUa,QAAV;;AAAA,SACEK,eAAe,CAAClB,MAAD,EAASa,QAAT,CADjB;AAAA,CAVC,CAvEL,sBAqFM,CACF,CAAC,IAAD,EAAO,GAAP,CADE,EAEF,CAAC,IAAD,EAAO,GAAP,CAFE,EAGF,CAAC,IAAD,EAAO,GAAP,CAHE,EAIF,CAAC,IAAD,EAAO,GAAP,CAJE,EAKF,CAAC,IAAD,EAAO,GAAP,CALE,EAMF,CAAC,IAAD,EAAO,GAAP,CANE,EAOF,CAAC,IAAD,EAAO,GAAP,CAPE,CAAD,CAQyCO,GARzC,CAQ6C;AAAA;AAAA,MAAEpB,MAAF;AAAA,MAAUc,QAAV;;AAAA,SAC9C,mBAAUd,MAAV,EAAkBc,QAAlB,CAD8C;AAAA,CAR7C,CArFL,GAgGEM,GAhGF,CAgGM,UAACC,CAAD;AAAA,SAAoB,CAACA,CAAC,CAACrB,MAAH,EAAWqB,CAAX,CAApB;AAAA,CAhGN,CADyD,CAA3D","sourcesContent":["import { Instruction, InstructionDefinition, OpCode } from \"./instructions\";\nimport { Mmu } from \"../memory/mmu\";\nimport { fromPairs } from \"lodash\";\nimport { ByteBitPosition, numberToByteHex } from \"../types\";\nimport { ByteRegister } from \"./registers\";\nimport { Cpu, ClockCycles } from \"./index\";\nimport { createRlR } from \"./rl\";\n\nclass CbInstruction implements Instruction {\n  public readonly opCode: OpCode;\n  public readonly label: string = \"CB\";\n\n  public constructor(opCode: OpCode) {\n    this.opCode = opCode;\n  }\n\n  public execute(cpu: Cpu, mmu: Mmu): ClockCycles {\n    const operand = mmu.readByte(cpu.registers.pc);\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const subInstruction = CB_INSTRUCTIONS[operand];\n    if (!subInstruction) {\n      throw new Error(\n        `No instruction for CB opCode ${numberToByteHex(operand)}`\n      );\n    }\n    cpu.registers.pc++;\n    subInstruction.execute(cpu, mmu);\n    return 4;\n  }\n}\n\nexport const createCb = (opCode: OpCode): Instruction =>\n  new CbInstruction(opCode);\n\nexport const createCbBitBR = (\n  opCode: OpCode,\n  position: ByteBitPosition,\n  register: ByteRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `BIT ${position}, ${register}`)\n    .loadRegister(register)\n    .bitFlags(position);\n\nexport const createCbBitBMHl = (\n  opCode: OpCode,\n  position: ByteBitPosition\n): Instruction =>\n  new InstructionDefinition(opCode, `BIT ${position}, (hl)`)\n    .loadRegister('hl')\n    .readMemory()\n    .bitFlags(position);\n\nconst CB_INSTRUCTIONS: { [opCode: number]: Instruction } = fromPairs(\n  [\n    ...([\n      [0x40, 0, \"b\"],\n      [0x41, 0, \"c\"],\n      [0x42, 0, \"d\"],\n      [0x43, 0, \"e\"],\n      [0x44, 0, \"h\"],\n      [0x45, 0, \"l\"],\n      [0x47, 0, \"a\"],\n\n      [0x48, 1, \"b\"],\n      [0x49, 1, \"c\"],\n      [0x4a, 1, \"d\"],\n      [0x4b, 1, \"e\"],\n      [0x4c, 1, \"h\"],\n      [0x4d, 1, \"l\"],\n      [0x4f, 1, \"a\"],\n\n      [0x50, 2, \"b\"],\n      [0x51, 2, \"c\"],\n      [0x52, 2, \"d\"],\n      [0x53, 2, \"e\"],\n      [0x54, 2, \"h\"],\n      [0x55, 2, \"l\"],\n      [0x57, 2, \"a\"],\n\n      [0x58, 3, \"b\"],\n      [0x59, 3, \"c\"],\n      [0x5a, 3, \"d\"],\n      [0x5b, 3, \"e\"],\n      [0x5c, 3, \"h\"],\n      [0x5d, 3, \"l\"],\n      [0x5f, 3, \"a\"],\n\n      [0x60, 4, \"b\"],\n      [0x61, 4, \"c\"],\n      [0x62, 4, \"d\"],\n      [0x63, 4, \"e\"],\n      [0x64, 4, \"h\"],\n      [0x65, 4, \"l\"],\n      [0x67, 4, \"a\"],\n\n      [0x68, 5, \"b\"],\n      [0x69, 5, \"c\"],\n      [0x6a, 5, \"d\"],\n      [0x6b, 5, \"e\"],\n      [0x6c, 5, \"h\"],\n      [0x6d, 5, \"l\"],\n      [0x6f, 5, \"a\"],\n\n      [0x70, 6, \"b\"],\n      [0x71, 6, \"c\"],\n      [0x72, 6, \"d\"],\n      [0x73, 6, \"e\"],\n      [0x74, 6, \"h\"],\n      [0x75, 6, \"l\"],\n      [0x77, 6, \"a\"],\n\n      [0x78, 7, \"b\"],\n      [0x79, 7, \"c\"],\n      [0x7a, 7, \"d\"],\n      [0x7b, 7, \"e\"],\n      [0x7c, 7, \"h\"],\n      [0x7d, 7, \"l\"],\n      [0x7f, 7, \"a\"]\n    ] as ReadonlyArray<[OpCode, ByteBitPosition, ByteRegister]>).map(\n      ([opCode, position, register]) =>\n        createCbBitBR(opCode, position, register)\n    ),\n\n\n    ...([\n      [0x46, 0],\n      [0x4e, 1],\n      [0x56, 2],\n      [0x5e, 3],\n      [0x66, 4],\n      [0x6e, 5],\n      [0x76, 6],\n      [0x7e, 7]\n    ] as ReadonlyArray<[OpCode, ByteBitPosition]>).map(\n      ([opCode, position]) =>\n        createCbBitBMHl(opCode, position)\n    ),\n\n    ...([\n      [0x17, \"a\"],\n      [0x10, \"b\"],\n      [0x11, \"c\"],\n      [0x12, \"d\"],\n      [0x13, \"e\"],\n      [0x14, \"h\"],\n      [0x15, \"l\"]\n    ] as ReadonlyArray<[OpCode, ByteRegister]>).map(([opCode, register]) =>\n      createRlR(opCode, register)\n    )\n  ].map((i: Instruction) => [i.opCode, i])\n);\n"],"file":"cb.js"}