{"version":3,"sources":["../../src/cpu/index.ts"],"names":["Cpu","registers","CpuRegistersImpl","remainingCycles","opCode","instruction","opCodesMap","Error","label","mmu","cycles","tickCycle","readByte","pc","execute","_currentInstructionPc","undefined"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;AAKA;IAEaA,G;;;AAEX;AAIA,iBAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,SAAKC,SAAL,GAAiB,IAAIC,2BAAJ,EAAjB;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACD;;;;wCAS0BC,M,EAAwB;AACjD,UAAMC,WAAW,GAAGC,oBAAWF,MAAX,CAApB;;AACA,UAAI,CAACC,WAAL,EAAkB;AAChB,cAAM,IAAIE,KAAJ,sCAAwC,kCAAgBH,MAAhB,CAAxC,EAAN;AACD;;AACD,aAAOC,WAAW,CAACG,KAAnB;AACD,K,CAED;;;;yBACYC,G,EAAUC,M,EAA2B;AAC/C,WAAKP,eAAL,IAAwBO,MAAxB,CAD+C,CAG/C;AACA;AACA;;AACA,aAAO,KAAKP,eAAL,GAAuB,CAA9B,EAAiC;AAC/B,aAAKQ,SAAL,CAAeF,GAAf;AACD;AACF;;;8BAEgBA,G,EAAgB;AAC/B;AACA,UAAML,MAAM,GAAGK,GAAG,CAACG,QAAJ,CAAa,KAAKX,SAAL,CAAeY,EAA5B,CAAf;AACA,WAAKV,eAAL,IAAwB,CAAxB;AAEA,UAAME,WAAW,GAAGC,oBAAWF,MAAX,CAApB;;AACA,UAAI,CAACC,WAAL,EAAkB;AAChB,cAAM,IAAIE,KAAJ,qCACyB,kCAC3BH,MAD2B,CADzB,8BAGiB,kCAAgB,KAAKH,SAAL,CAAeY,EAA/B,CAHjB,EAAN;AAKD;;AACD,WAAKZ,SAAL,CAAeY,EAAf;AAEA,WAAKV,eAAL,IAAwBE,WAAW,CAACS,OAAZ,CAAoB,IAApB,EAA0BL,GAA1B,CAAxB,CAf+B,CAiB/B;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACD;;;wBAzD4C;AAC3C,UAAI,KAAKM,qBAAL,KAA+BC,SAAnC,EAA8C;AAC5C,eAAO,KAAKf,SAAL,CAAeY,EAAtB;AACD;;AACD,aAAO,KAAKE,qBAAZ;AACD","sourcesContent":["import { Mmu } from \"../memory/mmu\";\nimport { OpCode } from \"./instructions\";\nimport { CpuRegisters, CpuRegistersImpl } from \"./registers\";\nimport opCodesMap from \"./opCodesMap\";\nimport { toByteHexString } from \"../utils/numberUtils\";\nimport { WordValue } from \"../types\";\n\nexport type ClockCycles = number;\n\n// const CLOCK_CYCLES_PER_MACHINE_CYCLE = 4;\n\nexport class Cpu {\n  public readonly registers: CpuRegisters;\n  // Temporary variable until refactor done\n  private remainingCycles: ClockCycles;\n  private _currentInstructionPc?: WordValue;\n\n  public constructor() {\n    this.registers = new CpuRegistersImpl();\n    this.remainingCycles = 0;\n  }\n\n  public get currentInstructionPc(): WordValue {\n    if (this._currentInstructionPc === undefined) {\n      return this.registers.pc;\n    }\n    return this._currentInstructionPc;\n  }\n\n  public getInstructionLabel(opCode: OpCode): string {\n    const instruction = opCodesMap[opCode];\n    if (!instruction) {\n      throw new Error(`No instruction with opCode ${toByteHexString(opCode)}`);\n    }\n    return instruction.label;\n  }\n\n  // TODO: See device comments for changes\n  public tick(mmu: Mmu, cycles: ClockCycles): void {\n    this.remainingCycles += cycles;\n\n    // Note: that this currently goes below 0 which is a no no. Should only\n    // simulate up to current available cycles. This will be achieved when all\n    // instructions are specified in 4 cycle chunks\n    while (this.remainingCycles > 4) {\n      this.tickCycle(mmu);\n    }\n  }\n\n  public tickCycle(mmu: Mmu): void {\n    // TODO: Convert to low level\n    const opCode = mmu.readByte(this.registers.pc);\n    this.remainingCycles -= 4;\n\n    const instruction = opCodesMap[opCode];\n    if (!instruction) {\n      throw new Error(\n        `No instruction for opCode ${toByteHexString(\n          opCode\n        )} reading from pc ${toByteHexString(this.registers.pc)}`\n      );\n    }\n    this.registers.pc++;\n\n    this.remainingCycles -= instruction.execute(this, mmu);\n\n    // detect interrupt\n    // Remembers its current state;\n    // I Jumps (sets the PC) to the address of the interrupt handler.\n    //   I Executes the interrupt handler code, which ends with a special\n    // RETI (Return From Interrupt) instruction, which restores state.\n\n    // I If multiple interrupts are detected, the one with the highest\n    // priority is handled first.\n\n    // The processor also has an Interrupt Master Enable (IME) switch,\n    // which allows it to completely deactivate interrupt handling\n    // (this is done during e.g. processing an interrupt, because we\n    // should not handle two of them at the same time).\n  }\n}\n"],"file":"index.js"}