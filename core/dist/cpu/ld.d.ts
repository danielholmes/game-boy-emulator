import { ByteRegister, NonAfGroupedWordRegister } from "./registers";
import { Instruction } from "./instructions";
export declare const createLdRR: (opCode: number, register1: ByteRegister, register2: ByteRegister) => Instruction;
export declare const ldRrNn: (opCode: number, register: "bc" | "de" | "hl" | "sp") => Instruction;
export declare const ldRN: (opCode: number, register: ByteRegister) => Instruction;
export declare const createLdRMRr: (opCode: number, register1: ByteRegister, register2: NonAfGroupedWordRegister) => Instruction;
export declare const ldRHlM: (opCode: number, register: ByteRegister) => Instruction;
export declare const ldHlMR: (opCode: number, register: ByteRegister) => Instruction;
export declare const ldHlMN: (opCode: number) => Instruction;
export declare const ldMFfCA: (opCode: number) => Instruction;
export declare const createLdAMFfC: (opCode: number) => Instruction;
export declare const ldMFfNA: (opCode: number) => Instruction;
export declare const ldAMFfN: (opCode: number) => Instruction;
export declare const ldGrM: (opCode: number, register: NonAfGroupedWordRegister) => Instruction;
export declare const ldAMNn: (opCode: number) => Instruction;
export declare const ldMRA: (opCode: number, register: NonAfGroupedWordRegister) => Instruction;
export declare const ldMNnA: (opCode: number) => Instruction;
export declare const ldMNnSp: (opCode: number) => Instruction;
export declare const createLddMHlA: (opCode: number) => Instruction;
export declare const ldiMHlA: (opCode: number) => Instruction;
//# sourceMappingURL=ld.d.ts.map