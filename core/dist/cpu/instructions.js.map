{"version":3,"sources":["../../src/cpu/instructions.ts"],"names":["InstructionDefinition","opCode","label","operations","cpu","mmu","reduce","value","op","newResult","execute","undefined","map","cycles","register","withOperation","XOrRegister","DecrementGroupedRegister","JrCheck","BitFlags","Nop","LoadRegister","LoadGroupedRegister","WriteMemoryFromOperandAddress","WriteMemoryFromRegisterAddress","WriteWordFromGroupedRegisterAddress","LoadOperand","loadByteOperand","WordValueToSignedByte","LoadWordOperand","LoadStackPointer","DecrementRegister","IncrementRegister","IncrementGroupedRegister","IncrementStackPointer","StoreInRegister","StoreInGroupedRegister","StoreInStackPointer","ReadMemory","WriteByteFromOperandAddress","WriteWordFromOperandAddress","amount","DecrementStackPointer","address","SetProgramCounter","LoadProgramCounter","WriteMemoryFromStackPointer","operation"],"mappings":"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","sourcesContent":["import { Mmu } from \"../memory/mmu\";\nimport {\n  BitFlags,\n  DecrementGroupedRegister,\n  DecrementRegister,\n  DecrementStackPointer,\n  IncrementGroupedRegister,\n  IncrementStackPointer,\n  JrCheck,\n  LoadGroupedRegister,\n  LoadOperand,\n  LoadProgramCounter,\n  LoadWordOperand,\n  LoadRegister,\n  LoadStackPointer,\n  LowLevelOperation,\n  LowLevelState,\n  Nop,\n  ReadMemory,\n  SetProgramCounter,\n  StoreInGroupedRegister,\n  StoreInRegister,\n  StoreInStackPointer,\n  WriteWordFromGroupedRegisterAddress,\n  WriteByteFromOperandAddress,\n  WriteMemoryFromStackPointer,\n  XOrRegister,\n  WordValueToSignedByte,\n  WriteWordFromOperandAddress,\n  WriteMemoryFromRegisterAddress,\n  IncrementRegister,\n  WriteMemoryFromOperandAddress\n} from \"./lowLevel\";\nimport { ByteRegister, GroupedWordRegister, Register } from \"./registers\";\nimport { sum } from \"lodash\";\nimport { MemoryAddress, WordValue } from \"../types\";\nimport { Cpu, ClockCycles } from \"./index\";\n\nexport type OpCode = number;\n\nexport interface Instruction {\n  readonly opCode: OpCode;\n  readonly label: string;\n  execute(cpu: Cpu, mmu: Mmu): ClockCycles;\n}\n\n// TODO: Definition to generate label?\n\n// TODO: A chained instruction definition that only allows valid\n// e.g. not allow loadFromRegister.loadFromRegister\n// if even relevant, see how other instructions pan out\nexport class InstructionDefinition implements Instruction {\n  public readonly opCode: OpCode;\n  public readonly label: string;\n  private readonly operations: ReadonlyArray<LowLevelOperation>;\n\n  public constructor(\n    opCode: OpCode,\n    label: string,\n    operations: ReadonlyArray<LowLevelOperation> = []\n  ) {\n    this.opCode = opCode;\n    this.label = label;\n    this.operations = operations;\n  }\n\n  public execute(cpu: Cpu, mmu: Mmu): ClockCycles {\n    this.operations.reduce(\n      (value: LowLevelState, op: LowLevelOperation): LowLevelState => {\n        const newResult = op.execute(cpu, mmu, value);\n        return typeof newResult === \"undefined\" ? undefined : newResult;\n      },\n      undefined\n    );\n    return sum(this.operations.map(op => op.cycles)) + 4;\n    // 4 are the cycles from reading the instruction. Perhaps shouldn't actually go here\n  }\n\n  public xOr(register: ByteRegister): InstructionDefinition {\n    return this.withOperation(new XOrRegister(register));\n  }\n\n  public decrementGroupedRegister(\n    register: GroupedWordRegister\n  ): InstructionDefinition {\n    return this.withOperation(new DecrementGroupedRegister(register));\n  }\n\n  public jrCheck(): InstructionDefinition {\n    return this.withOperation(new JrCheck());\n  }\n\n  public bitFlags(register: ByteRegister): InstructionDefinition {\n    return this.withOperation(new BitFlags(register));\n  }\n\n  public nop(): InstructionDefinition {\n    return this.withOperation(new Nop());\n  }\n\n  public loadRegister(register: ByteRegister): InstructionDefinition {\n    return this.withOperation(new LoadRegister(register));\n  }\n\n  public loadGroupedRegister(\n    register: GroupedWordRegister\n  ): InstructionDefinition {\n    return this.withOperation(new LoadGroupedRegister(register));\n  }\n\n  public writeMemoryFromOperandAddress(): InstructionDefinition {\n    return this.withOperation(new WriteMemoryFromOperandAddress());\n  }\n\n  public writeMemoryFromRegisterAddress(\n    register: Register\n  ): InstructionDefinition {\n    return this.withOperation(new WriteMemoryFromRegisterAddress(register));\n  }\n\n  public writeMemoryFromGroupedRegisterAddress(\n    register: GroupedWordRegister\n  ): InstructionDefinition {\n    return this.withOperation(\n      new WriteWordFromGroupedRegisterAddress(register)\n    );\n  }\n\n  public loadByteOperand(): InstructionDefinition {\n    return this.withOperation(new LoadOperand());\n  }\n\n  public loadSignedByteOperand(): InstructionDefinition {\n    return this.loadByteOperand().withOperation(new WordValueToSignedByte());\n  }\n\n  public loadWordOperand(): InstructionDefinition {\n    return this.withOperation(new LoadWordOperand());\n  }\n\n  public loadStackPointer(): InstructionDefinition {\n    return this.withOperation(new LoadStackPointer());\n  }\n\n  public decrementRegister(register: ByteRegister): InstructionDefinition {\n    return this.withOperation(new DecrementRegister(register));\n  }\n\n  public incrementRegister(register: Register): InstructionDefinition {\n    return this.withOperation(new IncrementRegister(register));\n  }\n\n  public incrementGroupedRegister(\n    register: GroupedWordRegister\n  ): InstructionDefinition {\n    return this.withOperation(new IncrementGroupedRegister(register));\n  }\n\n  public incrementStackPointer(): InstructionDefinition {\n    return this.withOperation(new IncrementStackPointer());\n  }\n\n  public storeInRegister(register: ByteRegister): InstructionDefinition {\n    return this.withOperation(new StoreInRegister(register));\n  }\n\n  public storeInGroupedRegister(\n    register: GroupedWordRegister\n  ): InstructionDefinition {\n    return this.withOperation(new StoreInGroupedRegister(register));\n  }\n\n  public storeInStackPointer(): InstructionDefinition {\n    return this.withOperation(new StoreInStackPointer());\n  }\n\n  public readMemory(): InstructionDefinition {\n    return this.withOperation(new ReadMemory());\n  }\n\n  public writeByteFromWordOperandAddress(): InstructionDefinition {\n    return this.withOperation(new WriteByteFromOperandAddress());\n  }\n\n  public writeWordFromProgramWord(): InstructionDefinition {\n    return this.withOperation(new WriteWordFromOperandAddress());\n  }\n\n  public decrementStackPointer(amount: WordValue): InstructionDefinition {\n    return this.withOperation(new DecrementStackPointer(amount));\n  }\n\n  public setProgramCounter(address: MemoryAddress): InstructionDefinition {\n    return this.withOperation(new SetProgramCounter(address));\n  }\n\n  public loadProgramCounter(): InstructionDefinition {\n    return this.withOperation(new LoadProgramCounter());\n  }\n\n  public writeMemoryFromStackPointer(): InstructionDefinition {\n    return this.withOperation(new WriteMemoryFromStackPointer());\n  }\n\n  private withOperation(operation: LowLevelOperation): InstructionDefinition {\n    return new InstructionDefinition(this.opCode, this.label, [\n      ...this.operations,\n      operation\n    ]);\n  }\n}\n"],"file":"instructions.js"}