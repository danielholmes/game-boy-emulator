{"version":3,"sources":["../../src/cpu/instructions.ts"],"names":["InstructionDefinition","opCode","label","operations","cpu","mmu","reduce","value","op","newResult","execute","undefined","map","cycles","register","withOperation","RotateLeftThroughCarry","InternalDelay","XOrRegister","flag","SetToPcIfFlag","AddToRegister","AddToPcIfFlag","position","BitFlags","CompareToRegister","LoadRegister","loadRegister","WriteMemoryHighByteFromOperandAddress","WriteMemoryLowByteFromOperandAddress","incrementRegister","WriteMemoryFromRegisterAddress","LoadOperand","AddToValue","loadByteOperand","ByteValueToSignedByte","LoadWordOperandHighByte","DecrementByteRegisterWithFlags","DecrementRegister","IncrementWordRegisterWithFlags","IncrementByteRegisterWithFlags","IncrementRegister","StoreInRegister","ReadMemory","ReadMemoryWord","WriteByteFromOperandAddress","WriteWordFromOperandAddress","address","SetRegister","decrementRegister","writeMemoryWordFromStackPointer","WriteMemoryWordHighByteFromStackPointer","WriteMemoryWordLowByteFromStackPointer","AddWithCarryToA","operation"],"mappings":"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","sourcesContent":["import { Mmu } from \"../memory/mmu\";\nimport {\n  BitFlags,\n  DecrementRegister,\n  DecrementByteRegisterWithFlags,\n  IncrementRegister,\n  AddToPcIfFlag,\n  LoadOperand,\n  LoadWordOperandHighByte,\n  LoadRegister,\n  LowLevelOp,\n  LowLevelState,\n  ReadMemory,\n  SetRegister,\n  StoreInRegister,\n  WriteByteFromOperandAddress,\n  XOrRegister,\n  ByteValueToSignedByte,\n  WriteWordFromOperandAddress,\n  WriteMemoryFromRegisterAddress,\n  WriteMemoryLowByteFromOperandAddress,\n  WriteMemoryHighByteFromOperandAddress,\n  InternalDelay,\n  WriteMemoryWordHighByteFromStackPointer,\n  WriteMemoryWordLowByteFromStackPointer,\n  RotateLeftThroughCarry,\n  ReadMemoryWord,\n  CompareToRegister,\n  CheckFlag,\n  IncrementByteRegisterWithFlags,\n  IncrementWordRegisterWithFlags,\n  AddToValue,\n  AddWithCarryToA,\n  AddToRegister,\n  SetToPcIfFlag\n} from \"./lowLevel\";\nimport { ByteRegister, Register, WordRegister } from \"./registers\";\nimport { sum } from \"lodash\";\nimport { ByteBitPosition, ByteValue, MemoryAddress, WordValue } from \"../types\";\nimport { Cpu, ClockCycles } from \"./index\";\n\nexport type OpCode = number;\n\nexport interface Instruction {\n  readonly opCode: OpCode;\n  readonly label: string;\n  execute(cpu: Cpu, mmu: Mmu): ClockCycles;\n}\n\n// TODO: Definition to generate label?\n\n// TODO: A chained instruction definition that only allows valid\n// e.g. not allow loadFromRegister.loadFromRegister\n// if even relevant, see how other instructions pan out\nexport class InstructionDefinition implements Instruction {\n  public readonly opCode: OpCode;\n  public readonly label: string;\n  private readonly operations: ReadonlyArray<LowLevelOp>;\n\n  public constructor(\n    opCode: OpCode,\n    label: string,\n    operations: ReadonlyArray<LowLevelOp> = []\n  ) {\n    this.opCode = opCode;\n    this.label = label;\n    this.operations = operations;\n  }\n\n  public execute(cpu: Cpu, mmu: Mmu): ClockCycles {\n    this.operations.reduce(\n      (value: LowLevelState, op: LowLevelOp): LowLevelState => {\n        const newResult = op.execute(cpu, mmu, value);\n        return typeof newResult === \"undefined\" ? undefined : newResult;\n      },\n      undefined\n    );\n    return sum(this.operations.map(op => op.cycles));\n  }\n\n  public rotateLeftThroughCarry(register: ByteRegister): InstructionDefinition {\n    return this.withOperation(new RotateLeftThroughCarry(register));\n  }\n\n  public internalDelay(): InstructionDefinition {\n    return this.withOperation(new InternalDelay());\n  }\n\n  public xOr(register: ByteRegister): InstructionDefinition {\n    return this.withOperation(new XOrRegister(register));\n  }\n\n  public setToPcIfFlag(flag: CheckFlag): InstructionDefinition {\n    return this.withOperation(new SetToPcIfFlag(flag));\n  }\n\n  public addToRegister(register: Register): InstructionDefinition {\n    return this.withOperation(new AddToRegister(register));\n  }\n\n  public addToPcIfFlag(flag: CheckFlag): InstructionDefinition {\n    return this.withOperation(new AddToPcIfFlag(flag));\n  }\n\n  public bitFlags(position: ByteBitPosition): InstructionDefinition {\n    return this.withOperation(new BitFlags(position));\n  }\n\n  public compareToRegister(register: Register): InstructionDefinition {\n    return this.withOperation(new CompareToRegister(register));\n  }\n\n  public loadRegister(register: Register): InstructionDefinition {\n    return this.withOperation(new LoadRegister(register));\n  }\n\n  public loadProgramCounter(): InstructionDefinition {\n    return this.loadRegister(\"pc\");\n  }\n\n  public writeMemoryFromOperandAddress(): InstructionDefinition {\n    return this.withOperation(new WriteMemoryHighByteFromOperandAddress())\n      .withOperation(new WriteMemoryLowByteFromOperandAddress())\n      .incrementRegister(\"pc\");\n  }\n\n  public writeMemoryFromFf00PlusRegisterAddress(\n    register: ByteRegister\n  ): InstructionDefinition {\n    return this.withOperation(\n      new WriteMemoryFromRegisterAddress(register, 0xff00)\n    );\n  }\n\n  public writeMemoryFromWordRegisterAddress(\n    register: WordRegister\n  ): InstructionDefinition {\n    return this.withOperation(new WriteMemoryFromRegisterAddress(register));\n  }\n\n  public loadByteOperand(): InstructionDefinition {\n    return this.withOperation(new LoadOperand());\n  }\n\n  public addToValue(value: WordValue | ByteValue): InstructionDefinition {\n    return this.withOperation(new AddToValue(value));\n  }\n\n  public loadSignedByteOperand(): InstructionDefinition {\n    return this.loadByteOperand().withOperation(new ByteValueToSignedByte());\n  }\n\n  public loadWordOperand(): InstructionDefinition {\n    return this.loadByteOperand().withOperation(new LoadWordOperandHighByte());\n  }\n\n  public decrementByteRegisterWithFlags(\n    register: ByteRegister\n  ): InstructionDefinition {\n    return this.withOperation(new DecrementByteRegisterWithFlags(register));\n  }\n\n  public decrementRegister(register: Register): InstructionDefinition {\n    return this.withOperation(new DecrementRegister(register));\n  }\n\n  public incrementWordRegisterWithFlags(\n    register: WordRegister\n  ): InstructionDefinition {\n    return this.withOperation(new IncrementWordRegisterWithFlags(register));\n  }\n\n  public incrementByteRegisterWithFlags(\n    register: ByteRegister\n  ): InstructionDefinition {\n    return this.withOperation(new IncrementByteRegisterWithFlags(register));\n  }\n\n  public incrementRegister(register: Register): InstructionDefinition {\n    return this.withOperation(new IncrementRegister(register));\n  }\n\n  public storeInRegister(register: Register): InstructionDefinition {\n    return this.withOperation(new StoreInRegister(register));\n  }\n\n  public readMemory(): InstructionDefinition {\n    return this.withOperation(new ReadMemory());\n  }\n\n  public readMemoryWord(): InstructionDefinition {\n    return this.withOperation(new ReadMemoryWord());\n  }\n\n  public writeByteFromWordOperandAddress(): InstructionDefinition {\n    return this.withOperation(new WriteByteFromOperandAddress());\n  }\n\n  public writeWordFromProgramWord(): InstructionDefinition {\n    return this.withOperation(new WriteWordFromOperandAddress());\n  }\n\n  public setRegister(\n    register: Register,\n    address: MemoryAddress\n  ): InstructionDefinition {\n    return this.withOperation(new SetRegister(register, address));\n  }\n\n  public pushWordToStack(): InstructionDefinition {\n    return this.decrementRegister(\"sp\")\n      .decrementRegister(\"sp\")\n      .writeMemoryWordFromStackPointer();\n  }\n\n  public writeMemoryWordFromStackPointer(): InstructionDefinition {\n    return this.withOperation(\n      new WriteMemoryWordHighByteFromStackPointer()\n    ).withOperation(new WriteMemoryWordLowByteFromStackPointer());\n  }\n\n  public addWithCarryToA(): InstructionDefinition {\n    return this.withOperation(new AddWithCarryToA());\n  }\n\n  private withOperation(operation: LowLevelOp): InstructionDefinition {\n    return new InstructionDefinition(this.opCode, this.label, [\n      ...this.operations,\n      operation\n    ]);\n  }\n}\n"],"file":"instructions.js"}