{"version":3,"sources":["../../src/cpu/inc.ts"],"names":["createIncRr","opCode","register","InstructionDefinition","incrementWordRegisterWithFlags","internalDelay","createIncR","incrementByteRegisterWithFlags"],"mappings":";;;;;;;AAAA;;AAGO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CACzBC,MADyB,EAEzBC,QAFyB;AAAA,SAIzB,IAAIC,mCAAJ,CAA0BF,MAA1B,gBAAyCC,QAAzC,GACGE,8BADH,CACkCF,QADlC,EAEGG,aAFH,EAJyB;AAAA,CAApB;;;;AAQA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACxBL,MADwB,EAExBC,QAFwB;AAAA,SAIxB,IAAIC,mCAAJ,CACEF,MADF,gBAESC,QAFT,GAGEK,8BAHF,CAGiCL,QAHjC,CAJwB;AAAA,CAAnB","sourcesContent":["import { Instruction, InstructionDefinition, OpCode } from \"./instructions\";\nimport { ByteRegister, NonAfGroupedWordRegister } from \"./registers\";\n\nexport const createIncRr = (\n  opCode: OpCode,\n  register: NonAfGroupedWordRegister | \"sp\"\n): Instruction =>\n  new InstructionDefinition(opCode, `INC ${register}`)\n    .incrementWordRegisterWithFlags(register)\n    .internalDelay();\n\nexport const createIncR = (\n  opCode: OpCode,\n  register: ByteRegister\n): Instruction =>\n  new InstructionDefinition(\n    opCode,\n    `INC ${register}`\n  ).incrementByteRegisterWithFlags(register);\n"],"file":"inc.js"}