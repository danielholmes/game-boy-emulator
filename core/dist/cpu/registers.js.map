{"version":3,"sources":["../../src/cpu/registers.ts"],"names":["NON_AF_GROUPED_WORD_REGISTERS","GROUPED_WORD_REGISTERS","BYTE_REGISTERS","NON_A_BYTE_REGISTERS","filter","r","BYTE_REGISTER_PAIR_PERMUTATIONS","map","r1","r2","FLAG_Z_BIT","FLAG_N_BIT","FLAG_H_BIT","FLAG_C_BIT","FLAG_Z_MASK","FLAG_N_MASK","FLAG_H_MASK","FLAG_C_MASK","CpuRegistersImpl","_a","_b","_c","_d","_e","_h","_l","_f","_pc","_sp","z","n","h","c","fZ","value","f","fC"],"mappings":"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","sourcesContent":["import { BitValue, ByteValue, WordValue } from \"../types\";\nimport { flatMap } from \"lodash\";\n\nexport type ByteRegister = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"h\" | \"l\";\n\nexport type NonAfGroupedWordRegister = \"bc\" | \"de\" | \"hl\";\n\nexport type GroupedWordRegister = \"af\" | NonAfGroupedWordRegister;\n\nexport type NativeWordRegister = \"sp\" | \"pc\";\n\nexport type Register =\n  | ByteRegister\n  | \"f\"\n  | GroupedWordRegister\n  | NativeWordRegister;\n\nexport const NON_AF_GROUPED_WORD_REGISTERS: ReadonlyArray<\n  NonAfGroupedWordRegister\n> = [\"bc\", \"de\", \"hl\"];\n\nexport const GROUPED_WORD_REGISTERS: ReadonlyArray<GroupedWordRegister> = [\n  \"af\",\n  ...NON_AF_GROUPED_WORD_REGISTERS\n];\n\nexport const BYTE_REGISTERS: ReadonlyArray<ByteRegister> = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"h\",\n  \"l\"\n];\n\nexport const NON_A_BYTE_REGISTERS: ReadonlyArray<\n  ByteRegister\n> = BYTE_REGISTERS.filter(r => r !== \"a\");\n\nexport const BYTE_REGISTER_PAIR_PERMUTATIONS: ReadonlyArray<\n  Readonly<[ByteRegister, ByteRegister]>\n> = flatMap(\n  BYTE_REGISTERS.map(r1 =>\n    BYTE_REGISTERS.map(r2 => [r1, r2] as Readonly<[ByteRegister, ByteRegister]>)\n  )\n);\n\n// TODO: Shouldn't be exported, find a way to encapsulate this\nexport const FLAG_Z_BIT = 7;\nconst FLAG_N_BIT = 6;\nconst FLAG_H_BIT = 5;\nconst FLAG_C_BIT = 4;\nexport const FLAG_Z_MASK = 1 << FLAG_Z_BIT;\nexport const FLAG_N_MASK = 1 << FLAG_N_BIT;\nexport const FLAG_H_MASK = 1 << FLAG_H_BIT;\nexport const FLAG_C_MASK = 1 << FLAG_C_BIT;\n\ntype BitIndicator = BitValue | boolean;\n\nexport interface CpuRegisters {\n  a: ByteValue;\n  b: ByteValue;\n  c: ByteValue;\n  d: ByteValue;\n  e: ByteValue;\n  h: ByteValue;\n  l: ByteValue;\n\n  f: ByteValue;\n\n  pc: WordValue;\n  sp: WordValue;\n\n  bc: WordValue;\n  de: WordValue;\n  hl: WordValue;\n  af: WordValue;\n\n  fZ: BitValue;\n  fNz: BitValue;\n  fN: BitValue;\n  fH: BitValue;\n  fC: BitValue;\n  fNc: BitValue;\n\n  setFFromParts(\n    z: BitIndicator,\n    n: BitIndicator,\n    h: BitIndicator,\n    c: BitIndicator\n  ): void;\n}\n\nexport class CpuRegistersImpl implements CpuRegisters {\n  private _a: ByteValue;\n  private _b: ByteValue;\n  private _c: ByteValue;\n  private _d: ByteValue;\n  private _e: ByteValue;\n  private _h: ByteValue;\n  private _l: ByteValue;\n\n  private _f: ByteValue;\n\n  private _pc: WordValue;\n  private _sp: WordValue;\n\n  public constructor() {\n    this._a = 0x00;\n    this._b = 0x00;\n    this._c = 0x00;\n    this._d = 0x00;\n    this._e = 0x00;\n    this._h = 0x00;\n    this._l = 0x00;\n\n    this._f = 0x0000;\n\n    this._pc = 0x0000;\n    this._sp = 0xffff;\n  }\n\n  public setFFromParts(\n    z: BitIndicator,\n    n: BitIndicator,\n    h: BitIndicator,\n    c: BitIndicator\n  ): void {\n    this._f =\n      (z ? FLAG_Z_MASK : 0) +\n      (n ? FLAG_N_MASK : 0) +\n      (h ? FLAG_H_MASK : 0) +\n      (c ? FLAG_C_MASK : 0);\n  }\n\n  public get fNz(): BitValue {\n    return this.fZ ? 0 : 1;\n  }\n  public set fNz(value: BitValue) {\n    this.fZ = value ? 0 : 1;\n  }\n\n  public get fZ(): BitValue {\n    return (this.f & FLAG_Z_MASK) !== 0 ? 1 : 0;\n  }\n  public set fZ(value: BitValue) {\n    if (value === 1) {\n      this.f |= FLAG_Z_MASK;\n      return;\n    }\n    this.f &= ~FLAG_Z_MASK;\n  }\n\n  public get fN(): BitValue {\n    return (this.f & FLAG_N_MASK) !== 0 ? 1 : 0;\n  }\n  public set fN(value: BitValue) {\n    if (value === 1) {\n      this.f |= FLAG_N_MASK;\n      return;\n    }\n    this.f &= ~FLAG_N_MASK;\n  }\n\n  public get fH(): BitValue {\n    return (this.f & FLAG_H_MASK) !== 0 ? 1 : 0;\n  }\n  public set fH(value: BitValue) {\n    if (value === 1) {\n      this.f |= FLAG_H_MASK;\n      return;\n    }\n    this.f &= ~FLAG_H_MASK;\n  }\n\n  public get fC(): BitValue {\n    return (this.f & FLAG_C_MASK) !== 0 ? 1 : 0;\n  }\n  public set fC(value: BitValue) {\n    if (value === 1) {\n      this.f |= FLAG_C_MASK;\n      return;\n    }\n    this.f &= ~FLAG_C_MASK;\n  }\n\n  public get fNc(): BitValue {\n    return this.fC ? 0 : 1;\n  }\n  public set fNc(value: BitValue) {\n    this.fC = value ? 0 : 1;\n  }\n\n  public set a(value: ByteValue) {\n    this._a = value & 0xff; // Mask to 8 bits\n  }\n  public get a(): ByteValue {\n    return this._a;\n  }\n\n  public set b(value: ByteValue) {\n    this._b = value & 0xff; // Mask to 8 bits\n  }\n  public get b(): ByteValue {\n    return this._b;\n  }\n\n  public set c(value: ByteValue) {\n    this._c = value & 0xff; // Mask to 8 bits\n  }\n  public get c(): ByteValue {\n    return this._c;\n  }\n\n  public set d(value: ByteValue) {\n    this._d = value & 0xff; // Mask to 8 bits\n  }\n  public get d(): ByteValue {\n    return this._d;\n  }\n\n  public set e(value: ByteValue) {\n    this._e = value & 0xff; // Mask to 8 bits\n  }\n  public get e(): ByteValue {\n    return this._e;\n  }\n\n  public set h(value: ByteValue) {\n    this._h = value & 0xff; // Mask to 8 bits\n  }\n  public get h(): ByteValue {\n    return this._h;\n  }\n\n  public set l(value: ByteValue) {\n    this._l = value & 0xff; // Mask to 8 bits\n  }\n  public get l(): ByteValue {\n    return this._l;\n  }\n\n  public set f(value: ByteValue) {\n    this._f = value & 0xff; // Mask to 8 bits\n  }\n  public get f(): ByteValue {\n    return this._f;\n  }\n\n  public set pc(value: ByteValue) {\n    this._pc = value & 0xffff; // Mask to 16 bits\n  }\n  public get pc(): ByteValue {\n    return this._pc;\n  }\n\n  public set sp(value: ByteValue) {\n    this._sp = value & 0xffff; // Mask to 16 bits\n  }\n  public get sp(): ByteValue {\n    return this._sp;\n  }\n\n  public set bc(value: ByteValue) {\n    this._b = (value >> 8) & 0xff;\n    this._c = value & 0xff;\n  }\n  public get bc(): ByteValue {\n    return (this._b << 8) + this._c;\n  }\n\n  public set de(value: ByteValue) {\n    this._d = (value >> 8) & 0xff;\n    this._e = value & 0xff;\n  }\n  public get de(): ByteValue {\n    return (this._d << 8) + this._e;\n  }\n\n  public set af(value: ByteValue) {\n    this._a = (value >> 8) & 0xff;\n    this._f = value & 0xff;\n  }\n  public get af(): ByteValue {\n    return (this._a << 8) + this._f;\n  }\n\n  public set hl(value: ByteValue) {\n    this._h = (value >> 8) & 0xff;\n    this._l = value & 0xff;\n  }\n  public get hl(): ByteValue {\n    return (this._h << 8) + this._l;\n  }\n}\n"],"file":"registers.js"}