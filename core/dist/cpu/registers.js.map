{"version":3,"sources":["../../src/cpu/registers.ts"],"names":["GROUPED_WORD_REGISTERS","BYTE_REGISTERS","BYTE_REGISTER_PAIR_PERMUTATIONS","map","r1","r2","FLAG_Z","FLAG_Z_MASK","FLAG_N_MASK","FLAG_H_MASK","FLAG_C_MASK","CpuRegistersImpl","_a","_b","_c","_d","_e","_h","_l","_f","_pc","_sp","fZ","f","fC","value"],"mappings":";;;;;;;AACA;;;;;;;;;;AAQO,IAAMA,sBAA0D,GAAG,CACxE,IADwE,EAExE,IAFwE,EAGxE,IAHwE,CAAnE;;AAMA,IAAMC,cAA2C,GAAG,CACzD,GADyD,EAEzD,GAFyD,EAGzD,GAHyD,EAIzD,GAJyD,EAKzD,GALyD,EAMzD,GANyD,EAOzD,GAPyD,CAApD;;AAUA,IAAMC,+BAEZ,GAAG,qBACFD,cAAc,CAACE,GAAf,CAAmB,UAAAC,EAAE;AAAA,SACnBH,cAAc,CAACE,GAAf,CAAmB,UAAAE,EAAE;AAAA,WAAI,CAACD,EAAD,EAAKC,EAAL,CAAJ;AAAA,GAArB,CADmB;AAAA,CAArB,CADE,CAFG;AAQP;;;;;;;;;;;;;;;AAgBA;;;AACO,IAAMC,MAAM,GAAG,CAAf;;AACA,IAAMC,WAAW,GAAG,KAAK,CAAzB;;AACA,IAAMC,WAAW,GAAG,KAAK,CAAzB;;AACA,IAAMC,WAAW,GAAG,KAAK,CAAzB;;AACA,IAAMC,WAAW,GAAG,KAAK,CAAzB;;;IA4BMC,gB;;;AAcX,8BAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,EAAL,GAAU,IAAV;AAEA,SAAKC,EAAL,GAAU,MAAV;AAEA,SAAKC,GAAL,GAAW,MAAX;AACA,SAAKC,GAAL,GAAW,MAAX;AACD;;;;wBAE0B;AACzB,aAAO,KAAKC,EAAL,GAAU,CAAV,GAAc,CAArB;AACD;;;wBAEyB;AACxB,aAAO,CAAC,KAAKC,CAAL,GAAShB,WAAV,MAA2B,CAA3B,GAA+B,CAA/B,GAAmC,CAA1C;AACD;;;wBAEyB;AACxB,aAAO,CAAC,KAAKgB,CAAL,GAASf,WAAV,MAA2B,CAA3B,GAA+B,CAA/B,GAAmC,CAA1C;AACD;;;wBAEyB;AACxB,aAAO,CAAC,KAAKe,CAAL,GAASd,WAAV,MAA2B,CAA3B,GAA+B,CAA/B,GAAmC,CAA1C;AACD;;;wBAEyB;AACxB,aAAO,CAAC,KAAKc,CAAL,GAASb,WAAV,MAA2B,CAA3B,GAA+B,CAA/B,GAAmC,CAA1C;AACD;;;wBAE0B;AACzB,aAAO,KAAKc,EAAL,GAAU,CAAV,GAAc,CAArB;AACD;;;sBAEYC,K,EAAkB;AAC7B,WAAKb,EAAL,GAAUa,KAAK,GAAG,IAAlB,CAD6B,CACL;AACzB,K;wBACyB;AACxB,aAAO,KAAKb,EAAZ;AACD;;;sBAEYa,K,EAAkB;AAC7B,WAAKZ,EAAL,GAAUY,KAAK,GAAG,IAAlB,CAD6B,CACL;AACzB,K;wBACyB;AACxB,aAAO,KAAKZ,EAAZ;AACD;;;sBAEYY,K,EAAkB;AAC7B,WAAKX,EAAL,GAAUW,KAAK,GAAG,IAAlB,CAD6B,CACL;AACzB,K;wBACyB;AACxB,aAAO,KAAKX,EAAZ;AACD;;;sBAEYW,K,EAAkB;AAC7B,WAAKV,EAAL,GAAUU,KAAK,GAAG,IAAlB,CAD6B,CACL;AACzB,K;wBACyB;AACxB,aAAO,KAAKV,EAAZ;AACD;;;sBAEYU,K,EAAkB;AAC7B,WAAKT,EAAL,GAAUS,KAAK,GAAG,IAAlB,CAD6B,CACL;AACzB,K;wBACyB;AACxB,aAAO,KAAKT,EAAZ;AACD;;;sBAEYS,K,EAAkB;AAC7B,WAAKR,EAAL,GAAUQ,KAAK,GAAG,IAAlB,CAD6B,CACL;AACzB,K;wBACyB;AACxB,aAAO,KAAKR,EAAZ;AACD;;;sBAEYQ,K,EAAkB;AAC7B,WAAKP,EAAL,GAAUO,KAAK,GAAG,IAAlB,CAD6B,CACL;AACzB,K;wBACyB;AACxB,aAAO,KAAKP,EAAZ;AACD;;;sBAEYO,K,EAAkB;AAC7B,WAAKN,EAAL,GAAUM,KAAK,GAAG,IAAlB,CAD6B,CACL;AACzB,K;wBACyB;AACxB,aAAO,KAAKN,EAAZ;AACD;;;sBAEaM,K,EAAkB;AAC9B,WAAKL,GAAL,GAAWK,KAAK,GAAG,MAAnB,CAD8B,CACH;AAC5B,K;wBAC0B;AACzB,aAAO,KAAKL,GAAZ;AACD;;;sBAEaK,K,EAAkB;AAC9B,WAAKJ,GAAL,GAAWI,KAAK,GAAG,MAAnB,CAD8B,CACH;AAC5B,K;wBAC0B;AACzB,aAAO,KAAKJ,GAAZ;AACD;;;sBAEaI,K,EAAkB;AAC9B,WAAKZ,EAAL,GAAWY,KAAK,IAAI,CAAV,GAAe,IAAzB;AACA,WAAKX,EAAL,GAAUW,KAAK,GAAG,IAAlB;AACD,K;wBAC0B;AACzB,aAAO,CAAC,KAAKZ,EAAL,IAAW,CAAZ,IAAiB,KAAKC,EAA7B;AACD;;;sBAEaW,K,EAAkB;AAC9B,WAAKV,EAAL,GAAWU,KAAK,IAAI,CAAV,GAAe,IAAzB;AACA,WAAKT,EAAL,GAAUS,KAAK,GAAG,IAAlB;AACD,K;wBAC0B;AACzB,aAAO,CAAC,KAAKV,EAAL,IAAW,CAAZ,IAAiB,KAAKC,EAA7B;AACD;;;sBAEaS,K,EAAkB;AAC9B,WAAKR,EAAL,GAAWQ,KAAK,IAAI,CAAV,GAAe,IAAzB;AACA,WAAKP,EAAL,GAAUO,KAAK,GAAG,IAAlB;AACD,K;wBAC0B;AACzB,aAAO,CAAC,KAAKR,EAAL,IAAW,CAAZ,IAAiB,KAAKC,EAA7B;AACD","sourcesContent":["import { BitValue, ByteValue, WordValue } from \"../types\";\nimport { flatMap } from \"lodash\";\n\nexport type ByteRegister = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"h\" | \"l\";\n\nexport type GroupedWordRegister = \"bc\" | \"de\" | \"hl\";\n\nexport type Register = ByteRegister | \"f\" | GroupedWordRegister | \"sp\" | \"pc\";\n\nexport const GROUPED_WORD_REGISTERS: ReadonlyArray<GroupedWordRegister> = [\n  \"bc\",\n  \"de\",\n  \"hl\"\n];\n\nexport const BYTE_REGISTERS: ReadonlyArray<ByteRegister> = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"h\",\n  \"l\"\n];\n\nexport const BYTE_REGISTER_PAIR_PERMUTATIONS: ReadonlyArray<\n  Readonly<[ByteRegister, ByteRegister]>\n> = flatMap(\n  BYTE_REGISTERS.map(r1 =>\n    BYTE_REGISTERS.map(r2 => [r1, r2] as Readonly<[ByteRegister, ByteRegister]>)\n  )\n);\n\n/*const B_C_REGISTERS: Readonly<[ByteRegister, ByteRegister]> = ['b', 'c']\nconst D_E_REGISTERS: Readonly<[ByteRegister, ByteRegister]> = ['d', 'e']\nconst H_L_REGISTERS: Readonly<[ByteRegister, ByteRegister]> = ['h', 'l']\n\nexport const groupedWordByteRegisters = (register: GroupedWordRegister): Readonly<[ByteRegister, ByteRegister]> => {\n  switch (register)\n  {\n    case 'bc':\n      return B_C_REGISTERS\n    case 'de':\n      return D_E_REGISTERS\n    case 'hl':\n      return H_L_REGISTERS\n  }\n}*/\n\n// TODO: Shouldn't be exported, find a way to encapsulate this\nexport const FLAG_Z = 7;\nexport const FLAG_Z_MASK = 1 << 7;\nexport const FLAG_N_MASK = 1 << 6;\nexport const FLAG_H_MASK = 1 << 5;\nexport const FLAG_C_MASK = 1 << 4;\n\nexport interface CpuRegisters {\n  a: ByteValue;\n  b: ByteValue;\n  c: ByteValue;\n  d: ByteValue;\n  e: ByteValue;\n  h: ByteValue;\n  l: ByteValue;\n\n  f: ByteValue;\n\n  pc: WordValue;\n  sp: WordValue;\n\n  bc: WordValue;\n  de: WordValue;\n  hl: WordValue;\n\n  readonly fZ: BitValue;\n  readonly fNz: BitValue;\n  readonly fN: BitValue;\n  readonly fH: BitValue;\n  readonly fC: BitValue;\n  readonly fNc: BitValue;\n}\n\nexport class CpuRegistersImpl implements CpuRegisters {\n  private _a: ByteValue;\n  private _b: ByteValue;\n  private _c: ByteValue;\n  private _d: ByteValue;\n  private _e: ByteValue;\n  private _h: ByteValue;\n  private _l: ByteValue;\n\n  private _f: ByteValue;\n\n  private _pc: WordValue;\n  private _sp: WordValue;\n\n  public constructor() {\n    this._a = 0x00;\n    this._b = 0x00;\n    this._c = 0x00;\n    this._d = 0x00;\n    this._e = 0x00;\n    this._h = 0x00;\n    this._l = 0x00;\n\n    this._f = 0x0000;\n\n    this._pc = 0x0000;\n    this._sp = 0xffff;\n  }\n\n  public get fNz(): BitValue {\n    return this.fZ ? 0 : 1;\n  }\n\n  public get fZ(): BitValue {\n    return (this.f & FLAG_Z_MASK) !== 0 ? 1 : 0;\n  }\n\n  public get fN(): BitValue {\n    return (this.f & FLAG_N_MASK) !== 0 ? 1 : 0;\n  }\n\n  public get fH(): BitValue {\n    return (this.f & FLAG_H_MASK) !== 0 ? 1 : 0;\n  }\n\n  public get fC(): BitValue {\n    return (this.f & FLAG_C_MASK) !== 0 ? 1 : 0;\n  }\n\n  public get fNc(): BitValue {\n    return this.fC ? 0 : 1;\n  }\n\n  public set a(value: ByteValue) {\n    this._a = value & 0xff; // Mask to 8 bits\n  }\n  public get a(): ByteValue {\n    return this._a;\n  }\n\n  public set b(value: ByteValue) {\n    this._b = value & 0xff; // Mask to 8 bits\n  }\n  public get b(): ByteValue {\n    return this._b;\n  }\n\n  public set c(value: ByteValue) {\n    this._c = value & 0xff; // Mask to 8 bits\n  }\n  public get c(): ByteValue {\n    return this._c;\n  }\n\n  public set d(value: ByteValue) {\n    this._d = value & 0xff; // Mask to 8 bits\n  }\n  public get d(): ByteValue {\n    return this._d;\n  }\n\n  public set e(value: ByteValue) {\n    this._e = value & 0xff; // Mask to 8 bits\n  }\n  public get e(): ByteValue {\n    return this._e;\n  }\n\n  public set h(value: ByteValue) {\n    this._h = value & 0xff; // Mask to 8 bits\n  }\n  public get h(): ByteValue {\n    return this._h;\n  }\n\n  public set l(value: ByteValue) {\n    this._l = value & 0xff; // Mask to 8 bits\n  }\n  public get l(): ByteValue {\n    return this._l;\n  }\n\n  public set f(value: ByteValue) {\n    this._f = value & 0xff; // Mask to 8 bits\n  }\n  public get f(): ByteValue {\n    return this._f;\n  }\n\n  public set pc(value: ByteValue) {\n    this._pc = value & 0xffff; // Mask to 16 bits\n  }\n  public get pc(): ByteValue {\n    return this._pc;\n  }\n\n  public set sp(value: ByteValue) {\n    this._sp = value & 0xffff; // Mask to 16 bits\n  }\n  public get sp(): ByteValue {\n    return this._sp;\n  }\n\n  public set bc(value: ByteValue) {\n    this._b = (value >> 8) & 0xff;\n    this._c = value & 0xff;\n  }\n  public get bc(): ByteValue {\n    return (this._b << 8) + this._c;\n  }\n\n  public set de(value: ByteValue) {\n    this._d = (value >> 8) & 0xff;\n    this._e = value & 0xff;\n  }\n  public get de(): ByteValue {\n    return (this._d << 8) + this._e;\n  }\n\n  public set hl(value: ByteValue) {\n    this._h = (value >> 8) & 0xff;\n    this._l = value & 0xff;\n  }\n  public get hl(): ByteValue {\n    return (this._h << 8) + this._l;\n  }\n}\n"],"file":"registers.js"}