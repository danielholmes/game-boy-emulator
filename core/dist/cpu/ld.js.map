{"version":3,"sources":["../../src/cpu/ld.ts"],"names":["createLdRR","opCode","register1","register2","InstructionDefinition","loadRegister","storeInRegister","ldRrNn","register","loadWordOperand","ldRN","loadByteOperand","createLdRMRr","readMemory","ldRHlM","ldHlMR","writeMemoryFromWordRegisterAddress","ldHlMN","ldMFfCA","writeMemoryFromFf00PlusRegisterAddress","createLdAMFfC","addToValue","ldMFfNA","writeMemoryFromOperandAddress","ldAMFfN","ldGrM","ldAMNn","ldMRA","ldMNnA","writeByteFromWordOperandAddress","ldMNnSp","writeWordFromProgramWord","createLddMHlA","decrementRegister","ldiMHlA","incrementRegister"],"mappings":"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","sourcesContent":["import { ByteRegister, NonAfGroupedWordRegister } from \"./registers\";\nimport { Instruction, InstructionDefinition, OpCode } from \"./instructions\";\n\nexport const createLdRR = (\n  opCode: OpCode,\n  register1: ByteRegister,\n  register2: ByteRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD ${register1},${register2}`)\n    .loadRegister(register2)\n    .storeInRegister(register1);\n\nexport const ldRrNn = (\n  opCode: OpCode,\n  register: NonAfGroupedWordRegister | \"sp\"\n): Instruction =>\n  new InstructionDefinition(opCode, `LD ${register},nn`)\n    .loadWordOperand()\n    .storeInRegister(register);\n\nexport const ldRN = (opCode: OpCode, register: ByteRegister): Instruction =>\n  new InstructionDefinition(opCode, `LD ${register},n`)\n    .loadByteOperand()\n    .storeInRegister(register);\n\nexport const createLdRMRr = (\n  opCode: OpCode,\n  register1: ByteRegister,\n  register2: NonAfGroupedWordRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD ${register1},(${register2})`)\n    .loadRegister(register2)\n    .readMemory()\n    .storeInRegister(register1);\n\nexport const ldRHlM = (opCode: OpCode, register: ByteRegister): Instruction =>\n  new InstructionDefinition(opCode, `LD ${register},(hl)`)\n    .loadRegister(\"hl\")\n    .readMemory()\n    .storeInRegister(register);\n\nexport const ldHlMR = (opCode: OpCode, register: ByteRegister): Instruction =>\n  new InstructionDefinition(opCode, `LD (hl),${register}`)\n    .loadRegister(register)\n    .writeMemoryFromWordRegisterAddress(\"hl\");\n\nexport const ldHlMN = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD (hl),n`)\n    .loadByteOperand()\n    .writeMemoryFromWordRegisterAddress(\"hl\");\n\nexport const ldMFfCA = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD (0xff00+c),a`)\n    .loadRegister(\"a\")\n    .writeMemoryFromFf00PlusRegisterAddress(\"c\");\n\nexport const createLdAMFfC = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD a,(0xff00+c)`)\n    .loadRegister(\"c\")\n    .addToValue(0xff00)\n    .readMemory()\n    .storeInRegister(\"a\");\n\nexport const ldMFfNA = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD (0xff00+n),a`)\n    .loadRegister(\"a\")\n    .writeMemoryFromOperandAddress();\n\nexport const ldAMFfN = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD a,(0xff00+n)`)\n    .loadByteOperand()\n    .addToValue(0xff00)\n    .readMemory()\n    .storeInRegister(\"a\");\n\nexport const ldGrM = (\n  opCode: OpCode,\n  register: NonAfGroupedWordRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD a,${register}`)\n    .loadRegister(register)\n    .readMemory()\n    .storeInRegister(\"a\");\n\nexport const ldAMNn = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD a,(nn)`)\n    .loadWordOperand()\n    .readMemory()\n    .storeInRegister(\"a\");\n\nexport const ldMRA = (\n  opCode: OpCode,\n  register: NonAfGroupedWordRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD (r),a`)\n    .loadRegister(\"a\")\n    .writeMemoryFromWordRegisterAddress(register);\n\nexport const ldMNnA = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD (nn),a`)\n    .loadRegister(\"a\")\n    .writeByteFromWordOperandAddress();\n\nexport const ldMNnSp = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD (nn),sp`)\n    .loadRegister(\"sp\")\n    .writeWordFromProgramWord();\n\nexport const createLddMHlA = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LDD (hl),a`)\n    .loadRegister(\"a\")\n    .writeMemoryFromWordRegisterAddress(\"hl\")\n    .decrementRegister(\"hl\");\n\nexport const ldiMHlA = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LDI (hl),a`)\n    .loadRegister(\"a\")\n    .writeMemoryFromWordRegisterAddress(\"hl\")\n    .incrementRegister(\"hl\");\n"],"file":"ld.js"}