{"version":3,"sources":["../../src/cpu/ld.ts"],"names":["createLdRR","opCode","register1","register2","InstructionDefinition","loadRegister","storeInRegister","createLdRN","register","loadByteOperand","createLdAMRr","loadGroupedRegister","readMemory","createLdRHlM","createLdHlMR","writeMemoryFromGroupedRegisterAddress","createLdHlMN","createLdMCA","writeMemoryFromRegisterAddress","createLdMNA","writeMemoryFromOperandAddress","createLdGrM","createLdAMNn","loadWordOperand","createLdMRA","createLdMNnA","writeByteFromWordOperandAddress","createLdGrNn","storeInGroupedRegister","createLdSpNn","storeInStackPointer","createLdMNnSp","loadStackPointer","writeWordFromProgramWord","createLddMHlA","decrementGroupedRegister"],"mappings":"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","sourcesContent":["import { ByteRegister, GroupedWordRegister } from \"./registers\";\nimport { Instruction, InstructionDefinition, OpCode } from \"./instructions\";\n\nexport const createLdRR = (\n  opCode: OpCode,\n  register1: ByteRegister,\n  register2: ByteRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD ${register1},${register2}`)\n    .loadRegister(register2)\n    .storeInRegister(register1);\n\nexport const createLdRN = (\n  opCode: OpCode,\n  register: ByteRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD ${register},n`)\n    .loadByteOperand()\n    .storeInRegister(register);\n\nexport const createLdAMRr = (\n  opCode: OpCode,\n  register: GroupedWordRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD a,(${register})`)\n    .loadGroupedRegister(register)\n    .readMemory()\n    .storeInRegister(\"a\");\n\nexport const createLdRHlM = (\n  opCode: OpCode,\n  register: ByteRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD ${register},(hl)`)\n    .loadGroupedRegister(\"hl\")\n    .readMemory()\n    .storeInRegister(register);\n\nexport const createLdHlMR = (\n  opCode: OpCode,\n  register: ByteRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD (hl),${register}`)\n    .loadRegister(register)\n    .writeMemoryFromGroupedRegisterAddress(\"hl\");\n\nexport const createLdHlMN = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD (hl),n`)\n    .loadByteOperand()\n    .writeMemoryFromGroupedRegisterAddress(\"hl\");\n\nexport const createLdMCA = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD (0xff00+c),a`)\n    .loadRegister(\"a\")\n    .writeMemoryFromRegisterAddress(\"c\");\n\nexport const createLdMNA = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD (0xff00+n),a`)\n    .loadRegister(\"a\")\n    .writeMemoryFromOperandAddress();\n\nexport const createLdGrM = (\n  opCode: OpCode,\n  register: GroupedWordRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD a,${register}`)\n    .loadGroupedRegister(register)\n    .readMemory()\n    .storeInRegister(\"a\");\n\nexport const createLdAMNn = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD a,(nn)`)\n    .loadWordOperand()\n    .readMemory()\n    .storeInRegister(\"a\");\n\nexport const createLdMRA = (\n  opCode: OpCode,\n  register: GroupedWordRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD (r),a`)\n    .loadRegister(\"a\")\n    .writeMemoryFromGroupedRegisterAddress(register);\n\nexport const createLdMNnA = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD (nn),a`)\n    .loadRegister(\"a\")\n    .writeByteFromWordOperandAddress();\n\nexport const createLdGrNn = (\n  opCode: OpCode,\n  register: GroupedWordRegister\n): Instruction =>\n  new InstructionDefinition(opCode, `LD ${register},nn`)\n    .loadWordOperand()\n    .storeInGroupedRegister(register);\n\nexport const createLdSpNn = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD sp,nn`)\n    .loadWordOperand()\n    .storeInStackPointer();\n\nexport const createLdMNnSp = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LD (nn),sp`)\n    .loadStackPointer()\n    .writeWordFromProgramWord();\n\nexport const createLddMHlA = (opCode: OpCode): Instruction =>\n  new InstructionDefinition(opCode, `LDD (hl),a`)\n    .loadRegister(\"a\")\n    .writeMemoryFromGroupedRegisterAddress(\"hl\")\n    .decrementGroupedRegister(\"hl\");\n"],"file":"ld.js"}