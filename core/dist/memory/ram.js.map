{"version":3,"sources":["../../src/memory/ram.ts"],"names":["ByteRamStorage","size","raw","Uint8Array","value","Error","address","length","assertValidAddress","subarray","assertByte","ZeroPageRam","storage","readByte","writeByte","WORKING_RAM_SIZE","WorkingRam","values","V_RAM_SIZE","VRam","startAddress","BG_MAP_INDICES","map","y","x","BG_MAP_DIMENSION","index","getTileData","TILE_DATA_TABLE_1_RANGE","TILE_DATA_TABLE_2_RANGE","endAddress","TILE_DATA_BYTES","readBytes","lowerBits","upperBits","TILE_DATA_INDICES","i","lower","TILE_DATA_BIT_MASKS","upper","getBackgroundMap","BG_MAP_1_RANGE","BG_MAP_2_RANGE","vRam","Math","round","random","TILE_DATA_DIMENSION","OamMemory","IOMemory"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport {\n  ByteValue,\n  MemoryAddress,\n  ReadonlyUint8Array,\n  ColorNumber\n} from \"../types\";\nimport { range, chunk } from \"lodash\";\nimport { toWordHexString } from \"..\";\nimport { toHexString } from \"../utils/numberUtils\";\n\nclass ByteRamStorage {\n  protected readonly raw: ReadonlyUint8Array;\n  private readonly size: number;\n\n  public constructor(size: number) {\n    this.size = size;\n    this.raw = new Uint8Array(this.size);\n  }\n\n  public get values(): ReadonlyUint8Array {\n    return this.raw;\n  }\n\n  private assertValidAddress(value: MemoryAddress): void {\n    if (value < 0x0000 || value >= this.size) {\n      throw new Error(\n        `Address ${toWordHexString(value)} out of range ${toWordHexString(\n          this.size\n        )}`\n      );\n    }\n  }\n\n  public readBytes(address: MemoryAddress, length: number): ReadonlyUint8Array {\n    this.assertValidAddress(address);\n    this.assertValidAddress(address + length - 1);\n    return this.raw.subarray(address, address + length);\n  }\n\n  private assertByte(value: number): void {\n    if (value < 0x00 || value > 0xff) {\n      throw new Error(`Out of bounds byte ${toHexString(value)}`);\n    }\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    this.assertValidAddress(address);\n    return this.raw[address];\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    this.assertValidAddress(address);\n    this.assertByte(value);\n    this.raw[address] = value;\n  }\n}\n\nexport class ZeroPageRam {\n  private readonly storage: ByteRamStorage;\n\n  public constructor() {\n    this.storage = new ByteRamStorage(0xff);\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return this.storage.readByte(address);\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    this.storage.writeByte(address, value);\n  }\n}\n\nexport const WORKING_RAM_SIZE = 0x2000;\n\nexport class WorkingRam {\n  private readonly storage: ByteRamStorage;\n\n  public constructor() {\n    this.storage = new ByteRamStorage(WORKING_RAM_SIZE);\n  }\n\n  public get values(): ReadonlyUint8Array {\n    return this.storage.values;\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return this.storage.readByte(address);\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    this.storage.writeByte(address, value);\n  }\n}\n\nexport const V_RAM_SIZE = 0x2000;\n\nexport type Tile = ReadonlyArray<ReadonlyArray<ColorNumber>>;\n\ntype TileTableNumber = 0 | 1;\n\ntype MemoryRange = Readonly<[MemoryAddress, MemoryAddress]>;\n\nexport type TileDataIndex = number;\n\nexport type BackgroundMap = ReadonlyArray<ReadonlyUint8Array>;\n\nexport class VRam {\n  private static readonly TILE_DATA_TABLE_1_RANGE: MemoryRange = [0x0000, 0x1000];\n  private static readonly TILE_DATA_TABLE_2_RANGE: MemoryRange = [0x0800, 0x1800];\n  private static readonly TILE_DATA_BYTES: number = 16;\n  private static readonly TILE_DATA_DIMENSION: number = 8;\n  private static readonly TILE_DATA_INDICES: ReadonlyArray<number> =\n    range(0, VRam.TILE_DATA_DIMENSION);\n  private static readonly TILE_DATA_BIT_MASKS: ReadonlyUint8Array =\n    new Uint8Array(\n      VRam.TILE_DATA_INDICES\n        .map((i) => 1 << (VRam.TILE_DATA_DIMENSION - i - 1))\n    );\n\n  private static readonly BG_MAP_1_RANGE: MemoryRange = [0x1800, 0x1c00];\n  private static readonly BG_MAP_2_RANGE: MemoryRange = [0x1c00, 0x2000];\n  private static readonly BG_MAP_DIMENSION: number = 32;\n  private static readonly BG_MAP_INDICES: ReadonlyArray<number> =\n    range(0, VRam.BG_MAP_DIMENSION);\n\n  private readonly storage: ByteRamStorage;\n\n  public constructor() {\n    this.storage = new ByteRamStorage(V_RAM_SIZE);\n  }\n\n  public get values(): ReadonlyUint8Array {\n    return this.storage.values;\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return this.storage.readByte(address);\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    this.storage.writeByte(address, value);\n  }\n\n  public get bgMap1(): BackgroundMap {\n    return this.getBackgroundMap(VRam.BG_MAP_1_RANGE);\n  }\n\n  public get bgMap2(): BackgroundMap {\n    return this.getBackgroundMap(VRam.BG_MAP_2_RANGE);\n  }\n\n  private getBackgroundMap([startAddress,]: MemoryRange): BackgroundMap {\n    return VRam.BG_MAP_INDICES.map((y) =>\n      new Uint8Array(\n        VRam.BG_MAP_INDICES.map((x) => {\n          const address = startAddress + x + y * VRam.BG_MAP_DIMENSION;\n          return this.readByte(address);\n        })\n      )\n    );\n  }\n\n  public getTileDataFromTable1(index: TileDataIndex): Tile {\n    return this.getTileData(VRam.TILE_DATA_TABLE_1_RANGE, index);\n  }\n\n  public getTileDataFromTable2(index: TileDataIndex): Tile {\n    return this.getTileData(VRam.TILE_DATA_TABLE_2_RANGE, index);\n  }\n\n  private getTileData(\n    [startAddress, endAddress]: Readonly<[MemoryAddress, MemoryAddress]>,\n    index: TileDataIndex\n  ): Tile {\n    const address = startAddress + index * VRam.TILE_DATA_BYTES;\n    if (address < startAddress || address >= endAddress) {\n      throw new Error(`Tile data index ${index} is invalid`);\n    }\n    return chunk(this.storage.readBytes(address, VRam.TILE_DATA_BYTES), 2)\n      .map(([lowerBits, upperBits]) =>\n        VRam.TILE_DATA_INDICES.map((i) => {\n          const lower = (lowerBits & VRam.TILE_DATA_BIT_MASKS[i]) === 0 ? 0 : 1;\n          const upper = (upperBits & VRam.TILE_DATA_BIT_MASKS[i]) === 0 ? 0 : 1;\n          if (upper === 1 && lower === 1) {\n            return 3;\n          }\n          if (upper === 1 && lower === 0) {\n            return 2;\n          }\n          if (upper === 0 && lower === 1) {\n            return 1;\n          }\n          return 0;\n        })\n      );\n  }\n\n  public static initializeRandomly(): VRam {\n    const vRam = new VRam();\n    for (let i = 0; i < V_RAM_SIZE; i++) {\n      vRam.writeByte(i, Math.round(Math.random() * 0xff));\n    }\n    return vRam;\n  }\n}\n\nexport class OamMemory {\n  private readonly storage: ByteRamStorage;\n\n  public constructor() {\n    this.storage = new ByteRamStorage(0xa0);\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return this.storage.readByte(address);\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    this.storage.writeByte(address, value);\n  }\n}\n\n// https://fms.komkon.org/GameBoy/Tech/Software.html\nexport class IOMemory {\n  private readonly storage: ByteRamStorage;\n\n  public constructor() {\n    this.storage = new ByteRamStorage(0x7f);\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return this.storage.readByte(address);\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    this.storage.writeByte(address, value);\n  }\n}\n"],"file":"ram.js"}