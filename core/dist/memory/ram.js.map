{"version":3,"sources":["../../src/memory/ram.ts"],"names":["Ram","size","raw","Uint8Array","slice","value","Error","address","assertValidAddress","length","assertByte","ZeroPageRam","WorkingRam","V_RAM_SIZE","VRam","index","getTileData","TILE_DATA_TABLE_1_RANGE","TILE_DATA_TABLE_2_RANGE","startAddress","endAddress","TILE_DATA_BYTES","readBytes","map","lowerBits","upperBits","TILE_DATA_INDICES","i","lower","TILE_DATA_BIT_MASKS","upper","vRam","writeByte","Math","round","random","TILE_DATA_DIMENSION","OamMemory","IOMemory"],"mappings":";;;;;;;AAAA;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,G;;;AAIJ,eAAmBC,IAAnB,EAAiC;AAAA;;AAAA;;AAAA;;AAC/B,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAW,IAAIC,UAAJ,CAAe,KAAKF,IAApB,CAAX;AACD;;;;gCAE8B;AAC7B,aAAO,KAAKC,GAAL,CAASE,KAAT,EAAP;AACD;;;uCAE0BC,K,EAA4B;AACrD,UAAIA,KAAK,GAAG,MAAR,IAAkBA,KAAK,IAAI,KAAKJ,IAApC,EAA0C;AACxC,cAAM,IAAIK,KAAJ,mBACO,4BAAgBD,KAAhB,CADP,2BAC8C,4BAChD,KAAKJ,IAD2C,CAD9C,EAAN;AAKD;AACF;;;+BAEkBI,K,EAAqB;AACtC,UAAIA,KAAK,GAAG,IAAR,IAAgBA,KAAK,GAAG,IAA5B,EAAkC;AAChC,cAAM,IAAIC,KAAJ,8BAAgC,wBAAYD,KAAZ,CAAhC,EAAN;AACD;AACF;;;6BAEeE,O,EAAmC;AACjD,WAAKC,kBAAL,CAAwBD,OAAxB;AACA,aAAO,KAAKL,GAAL,CAASK,OAAT,CAAP;AACD;;;8BAEmBA,O,EAAwBE,M,EAA4B;AACtE,WAAKD,kBAAL,CAAwBD,OAAxB;AACA,WAAKC,kBAAL,CAAwBD,OAAO,GAAGE,MAAV,GAAmB,CAA3C;AACA,aAAO,KAAKP,GAAL,CAASE,KAAT,CAAeG,OAAf,EAAwBA,OAAO,GAAGE,MAAlC,CAAP;AACD;;;8BAEgBF,O,EAAwBF,K,EAAwB;AAC/D,WAAKG,kBAAL,CAAwBD,OAAxB;AACA,WAAKG,UAAL,CAAgBL,KAAhB;AACA,WAAKH,GAAL,CAASK,OAAT,IAAoBF,KAApB;AACD;;;;;;IAGUM,W;;;;;AACX,yBAAqB;AAAA;;AAAA,oFACb,IADa;AAEpB;;;EAH8BX,G;;;;IAMpBY,U;;;;;AACX,wBAAqB;AAAA;;AAAA,mFACb,MADa;AAEpB;;;EAH6BZ,G;;;AAMzB,IAAMa,UAAU,GAAG,MAAnB;;;IAIMC,I;;;;;AASX,kBAAqB;AAAA;;AAAA,6EACbD,UADa;AAEpB;;;;0CAE4BE,K,EAAqB;AAChD,aAAO,KAAKC,WAAL,CAAiBF,IAAI,CAACG,uBAAtB,EAA+CF,KAA/C,CAAP;AACD;;;0CAE4BA,K,EAAqB;AAChD,aAAO,KAAKC,WAAL,CAAiBF,IAAI,CAACI,uBAAtB,EAA+CH,KAA/C,CAAP;AACD;;;sCAEyFA,K,EAAqB;AAAA;AAAA,UAA1FI,YAA0F;AAAA,UAA5EC,UAA4E;;AAC7G,UAAMb,OAAO,GAAGY,YAAY,GAAGJ,KAAK,GAAGD,IAAI,CAACO,eAA5C;;AACA,UAAId,OAAO,GAAGY,YAAV,IAA0BZ,OAAO,IAAIa,UAAzC,EAAqD;AACnD,cAAM,IAAId,KAAJ,2BAA6BS,KAA7B,iBAAN;AACD;;AACD,aAAO,mBAAM,KAAKO,SAAL,CAAef,OAAf,EAAwBO,IAAI,CAACO,eAA7B,CAAN,EAAqD,CAArD,EACJE,GADI,CACA;AAAA;AAAA,YAAEC,SAAF;AAAA,YAAaC,SAAb;;AAAA,eACHX,IAAI,CAACY,iBAAL,CAAuBH,GAAvB,CAA2B,UAACI,CAAD,EAAO;AAChC,cAAMC,KAAK,GAAG,CAACJ,SAAS,GAAGV,IAAI,CAACe,mBAAL,CAAyBF,CAAzB,CAAb,MAA8C,CAA9C,GAAkD,CAAlD,GAAsD,CAApE;AACA,cAAMG,KAAK,GAAG,CAACL,SAAS,GAAGX,IAAI,CAACe,mBAAL,CAAyBF,CAAzB,CAAb,MAA8C,CAA9C,GAAkD,CAAlD,GAAsD,CAApE;;AACA,cAAIG,KAAK,KAAK,CAAV,IAAeF,KAAK,KAAK,CAA7B,EAAgC;AAC9B,mBAAO,CAAP;AACD;;AACD,cAAIE,KAAK,KAAK,CAAV,IAAeF,KAAK,KAAK,CAA7B,EAAgC;AAC9B,mBAAO,CAAP;AACD;;AACD,cAAIE,KAAK,KAAK,CAAV,IAAeF,KAAK,KAAK,CAA7B,EAAgC;AAC9B,mBAAO,CAAP;AACD;;AACD,iBAAO,CAAP;AACD,SAbD,CADG;AAAA,OADA,CAAP;AAiBD;;;yCAEwC;AACvC,UAAMG,IAAI,GAAG,IAAIjB,IAAJ,EAAb;;AACA,WAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,UAApB,EAAgCc,CAAC,EAAjC,EAAqC;AACnCI,QAAAA,IAAI,CAACC,SAAL,CAAeL,CAAf,EAAkBM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CAAlB;AACD;;AACD,aAAOJ,IAAP;AACD;;;;EAnDuB/B,G;;;;gBAAbc,I,6BACiF,CAAC,MAAD,EAAS,MAAT,C;;gBADjFA,I,6BAEiF,CAAC,MAAD,EAAS,MAAT,C;;gBAFjFA,I,qBAGuC,E;;gBAHvCA,I,yBAI2C,C;;gBAJ3CA,I,uBAKwD,mBAAM,CAAN,EAASA,IAAI,CAACsB,mBAAd,C;;gBALxDtB,I,yBAOTA,IAAI,CAACY,iBAAL,CAAuBH,GAAvB,CAA2B,UAACI,CAAD;AAAA,SAAO,KAAMb,IAAI,CAACsB,mBAAL,GAA2BT,CAA3B,GAA+B,CAA5C;AAAA,CAA3B,C;;IA+CSU,S;;;;;AACX,uBAAqB;AAAA;;AAAA,kFACb,IADa;AAEpB;;;EAH4BrC,G,GAM/B;;;;;IACasC,Q;;;;;AACX,sBAAqB;AAAA;;AAAA,iFACb,IADa;AAEpB;;;;6BAEe/B,O,EAAmC;AACjD,oFAAsBA,OAAtB;AACD;;;8BAEgBA,O,EAAwBF,K,EAAwB;AAC/D;AACA;AACA;AACA;AACA,8EAAgBE,OAAhB,EAAyBF,KAAzB;AACD;;;;EAf2BL,G","sourcesContent":["import {\n  ByteValue,\n  MemoryAddress,\n  numberToHex,\n  numberToWordHex, PixelColor\n} from \"../types\";\nimport { range, chunk, flatMap } from \"lodash\";\n\nclass Ram {\n  protected readonly raw: Uint8Array;\n  private readonly size: number;\n\n  public constructor(size: number) {\n    this.size = size;\n    this.raw = new Uint8Array(this.size);\n  }\n\n  public getValues(): Uint8Array {\n    return this.raw.slice();\n  }\n\n  private assertValidAddress(value: MemoryAddress): void {\n    if (value < 0x0000 || value >= this.size) {\n      throw new Error(\n        `Address ${numberToWordHex(value)} out of range ${numberToWordHex(\n          this.size\n        )}`\n      );\n    }\n  }\n\n  private assertByte(value: number): void {\n    if (value < 0x00 || value > 0xff) {\n      throw new Error(`Out of bounds byte ${numberToHex(value)}`);\n    }\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    this.assertValidAddress(address);\n    return this.raw[address];\n  }\n\n  protected readBytes(address: MemoryAddress, length: number): Uint8Array {\n    this.assertValidAddress(address);\n    this.assertValidAddress(address + length - 1);\n    return this.raw.slice(address, address + length);\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    this.assertValidAddress(address);\n    this.assertByte(value);\n    this.raw[address] = value;\n  }\n}\n\nexport class ZeroPageRam extends Ram {\n  public constructor() {\n    super(0xff);\n  }\n}\n\nexport class WorkingRam extends Ram {\n  public constructor() {\n    super(0x2000);\n  }\n}\n\nexport const V_RAM_SIZE = 0x2000;\n\nexport type Tile = ReadonlyArray<ReadonlyArray<PixelColor>>;\n\nexport class VRam extends Ram {\n  private static readonly TILE_DATA_TABLE_1_RANGE: Readonly<[MemoryAddress, MemoryAddress]> = [0x0000, 0x1000];\n  private static readonly TILE_DATA_TABLE_2_RANGE: Readonly<[MemoryAddress, MemoryAddress]> = [0x0800, 0x1800];\n  private static readonly TILE_DATA_BYTES: number = 16;\n  private static readonly TILE_DATA_DIMENSION: number = 8;\n  private static readonly TILE_DATA_INDICES: ReadonlyArray<number> = range(0, VRam.TILE_DATA_DIMENSION);\n  private static readonly TILE_DATA_BIT_MASKS: ReadonlyArray<number> =\n    VRam.TILE_DATA_INDICES.map((i) => 1 << (VRam.TILE_DATA_DIMENSION - i - 1));\n\n  public constructor() {\n    super(V_RAM_SIZE);\n  }\n\n  public getTileDataFromTable1(index: number): Tile {\n    return this.getTileData(VRam.TILE_DATA_TABLE_1_RANGE, index);\n  }\n\n  public getTileDataFromTable2(index: number): Tile {\n    return this.getTileData(VRam.TILE_DATA_TABLE_2_RANGE, index);\n  }\n\n  private getTileData([startAddress, endAddress]: Readonly<[MemoryAddress, MemoryAddress]>, index: number): Tile {\n    const address = startAddress + index * VRam.TILE_DATA_BYTES;\n    if (address < startAddress || address >= endAddress) {\n      throw new Error(`Tile data index ${index} is invalid`);\n    }\n    return chunk(this.readBytes(address, VRam.TILE_DATA_BYTES), 2)\n      .map(([lowerBits, upperBits]) =>\n        VRam.TILE_DATA_INDICES.map((i) => {\n          const lower = (lowerBits & VRam.TILE_DATA_BIT_MASKS[i]) === 0 ? 0 : 1;\n          const upper = (upperBits & VRam.TILE_DATA_BIT_MASKS[i]) === 0 ? 0 : 1;\n          if (upper === 1 && lower === 1) {\n            return 3;\n          }\n          if (upper === 1 && lower === 0) {\n            return 2;\n          }\n          if (upper === 0 && lower === 1) {\n            return 1;\n          }\n          return 0;\n        })\n      );\n  }\n\n  public static initializeRandomly(): VRam {\n    const vRam = new VRam();\n    for (let i = 0; i < V_RAM_SIZE; i++) {\n      vRam.writeByte(i, Math.round(Math.random() * 0xff));\n    }\n    return vRam;\n  }\n}\n\nexport class OamMemory extends Ram {\n  public constructor() {\n    super(0xa0);\n  }\n}\n\n// https://fms.komkon.org/GameBoy/Tech/Software.html\nexport class IOMemory extends Ram {\n  public constructor() {\n    super(0x7f);\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return super.readByte(address);\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    // bios seems to use it\n    // if (address === 0x0044) {\n    //   throw new Error(\"Current scan line Read-only\");\n    // }\n    super.writeByte(address, value);\n  }\n}\n"],"file":"ram.js"}