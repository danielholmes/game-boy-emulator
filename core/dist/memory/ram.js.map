{"version":3,"sources":["../../src/memory/ram.ts"],"names":["Ram","size","raw","Uint8Array","slice","value","Error","address","assertValidAddress","assertByte","ZeroPageRam","WorkingRam","V_RAM_SIZE","VRam","vRam","i","writeByte","Math","round","random","OamMemory","IOMemory"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;IAOMA,G;;;AAIJ,eAAmBC,IAAnB,EAAiC;AAAA;;AAAA;;AAAA;;AAC/B,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAW,IAAIC,UAAJ,CAAe,KAAKF,IAApB,CAAX;AACD;;;;gCAE8B;AAC7B,aAAO,KAAKC,GAAL,CAASE,KAAT,EAAP;AACD;;;uCAE0BC,K,EAA4B;AACrD,UAAIA,KAAK,GAAG,MAAR,IAAkBA,KAAK,IAAI,KAAKJ,IAApC,EAA0C;AACxC,cAAM,IAAIK,KAAJ,mBACO,4BAAgBD,KAAhB,CADP,2BAC8C,4BAChD,KAAKJ,IAD2C,CAD9C,EAAN;AAKD;AACF;;;+BAEkBI,K,EAAqB;AACtC,UAAIA,KAAK,GAAG,IAAR,IAAgBA,KAAK,GAAG,IAA5B,EAAkC;AAChC,cAAM,IAAIC,KAAJ,8BAAgC,wBAAYD,KAAZ,CAAhC,EAAN;AACD;AACF;;;6BAEeE,O,EAAmC;AACjD,WAAKC,kBAAL,CAAwBD,OAAxB;AACA,aAAO,KAAKL,GAAL,CAASK,OAAT,CAAP;AACD;;;8BAEgBA,O,EAAwBF,K,EAAwB;AAC/D,WAAKG,kBAAL,CAAwBD,OAAxB;AACA,WAAKE,UAAL,CAAgBJ,KAAhB;AACA,WAAKH,GAAL,CAASK,OAAT,IAAoBF,KAApB;AACD;;;;;;IAGUK,W;;;;;AACX,yBAAqB;AAAA;;AAAA,oFACb,IADa;AAEpB;;;EAH8BV,G;;;;IAMpBW,U;;;;;AACX,wBAAqB;AAAA;;AAAA,mFACb,MADa;AAEpB;;;EAH6BX,G;;;AAMhC,IAAMY,UAAU,GAAG,MAAnB;;IAEaC,I;;;;;AACX,kBAAqB;AAAA;;AAAA,6EACbD,UADa;AAEpB;;;;yCAEwC;AACvC,UAAME,IAAI,GAAG,IAAID,IAAJ,EAAb;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAApB,EAAgCG,CAAC,EAAjC,EAAqC;AACnCD,QAAAA,IAAI,CAACE,SAAL,CAAeD,CAAf,EAAkBE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CAAlB;AACD;;AACD,aAAOL,IAAP;AACD;;;;EAXuBd,G;;;;IAcboB,S;;;;;AACX,uBAAqB;AAAA;;AAAA,kFACb,IADa;AAEpB;;;EAH4BpB,G,GAM/B;;;;;IACaqB,Q;;;;;AACX,sBAAqB;AAAA;;AAAA,iFACb,IADa;AAEpB;;;;6BAEed,O,EAAmC;AACjD,oFAAsBA,OAAtB;AACD;;;8BAEgBA,O,EAAwBF,K,EAAwB;AAC/D;AACA;AACA;AACA;AACA,8EAAgBE,OAAhB,EAAyBF,KAAzB;AACD;;;;EAf2BL,G","sourcesContent":["import {\n  ByteValue,\n  MemoryAddress,\n  numberToHex,\n  numberToWordHex\n} from \"../types\";\n\nclass Ram {\n  protected readonly raw: Uint8Array;\n  private readonly size: number;\n\n  public constructor(size: number) {\n    this.size = size;\n    this.raw = new Uint8Array(this.size);\n  }\n\n  public getValues(): Uint8Array {\n    return this.raw.slice();\n  }\n\n  private assertValidAddress(value: MemoryAddress): void {\n    if (value < 0x0000 || value >= this.size) {\n      throw new Error(\n        `Address ${numberToWordHex(value)} out of range ${numberToWordHex(\n          this.size\n        )}`\n      );\n    }\n  }\n\n  private assertByte(value: number): void {\n    if (value < 0x00 || value > 0xff) {\n      throw new Error(`Out of bounds byte ${numberToHex(value)}`);\n    }\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    this.assertValidAddress(address);\n    return this.raw[address];\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    this.assertValidAddress(address);\n    this.assertByte(value);\n    this.raw[address] = value;\n  }\n}\n\nexport class ZeroPageRam extends Ram {\n  public constructor() {\n    super(0xff);\n  }\n}\n\nexport class WorkingRam extends Ram {\n  public constructor() {\n    super(0x2000);\n  }\n}\n\nconst V_RAM_SIZE = 0x2000;\n\nexport class VRam extends Ram {\n  public constructor() {\n    super(V_RAM_SIZE);\n  }\n\n  public static initializeRandomly(): VRam {\n    const vRam = new VRam();\n    for (let i = 0; i < V_RAM_SIZE; i++) {\n      vRam.writeByte(i, Math.round(Math.random() * 0xff));\n    }\n    return vRam;\n  }\n}\n\nexport class OamMemory extends Ram {\n  public constructor() {\n    super(0xa0);\n  }\n}\n\n// https://fms.komkon.org/GameBoy/Tech/Software.html\nexport class IOMemory extends Ram {\n  public constructor() {\n    super(0x7f);\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return super.readByte(address);\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    // bios seems to use it\n    // if (address === 0x0044) {\n    //   throw new Error(\"Current scan line Read-only\");\n    // }\n    super.writeByte(address, value);\n  }\n}\n"],"file":"ram.js"}