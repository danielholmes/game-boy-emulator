{"version":3,"sources":["../../src/memory/mmu.ts"],"names":["Mmu","bios","ram","vRam","io","oam","zeroPage","cartridge","workingRam","address","isInBios","readByte","Error","value","console","log","toString","writeByte","getValues"],"mappings":"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","sourcesContent":["import { ByteValue, MemoryAddress, numberToWordHex, WordValue } from \"../types\";\nimport { WorkingRam, VRam, ZeroPageRam, IOMemory, OamMemory } from \"./ram\";\nimport { Bios } from \"../bios\";\nimport { Cartridge } from \"../cartridge\";\n\nexport class Mmu {\n  private readonly bios: Bios;\n  private readonly workingRam: WorkingRam;\n  private readonly vRam: VRam;\n  private readonly io: IOMemory;\n  private readonly oam: OamMemory;\n  private readonly zeroPage: ZeroPageRam;\n  private cartridge?: Cartridge;\n\n  public constructor(\n    bios: Bios,\n    ram: WorkingRam,\n    vRam: VRam,\n    io: IOMemory,\n    oam: OamMemory,\n    zeroPage: ZeroPageRam,\n    cartridge?: Cartridge\n  ) {\n    this.bios = bios;\n    this.workingRam = ram;\n    this.vRam = vRam;\n    this.oam = oam;\n    this.io = io;\n    this.zeroPage = zeroPage;\n    this.cartridge = cartridge;\n  }\n\n  public get isInBios(): boolean {\n    return this.readByte(0xff50) === 0x00;\n  }\n\n  public get bGP(): ByteValue {\n    return this.readByte(0xff47);\n  }\n\n  public get scY(): ByteValue {\n    return this.readByte(0xff42);\n  }\n\n  public get scX(): ByteValue {\n    return this.readByte(0xff43);\n  }\n\n  public get workingRamValues(): Uint8Array {\n    return this.workingRam.getValues();\n  }\n\n  public loadCartridge(cartridge: Cartridge): void {\n    this.cartridge = cartridge;\n  }\n\n  // TODO: Test access and shadowing\n  public readByte(address: MemoryAddress): ByteValue {\n    // TODO: Once the bios has run, it is removed and goes through to cartridge\n    if (address >= 0x0000 && address <= 0x00ff && this.isInBios) {\n      return this.bios.readByte(address);\n    }\n    if (address >= 0x0000 && address <= 0x7fff) {\n      if (!this.cartridge) {\n        // throw new Error(`Cannot access address ${numberToWordHex(address)}: no cartridge`);\n        return 0;\n      }\n      return this.cartridge.readByte(address);\n    }\n    if (address >= 0x8000 && address <= 0x9fff) {\n      return this.vRam.readByte(address - 0x8000);\n    }\n    if (address >= 0xc000 && address <= 0xdfff) {\n      return this.workingRam.readByte(address - 0xc000);\n    }\n    if (address >= 0xa000 && address <= 0xbfff) {\n      throw new Error(\"TODO: Access memory on cartridge\");\n    }\n    if (address >= 0xe000 && address <= 0xfdff) {\n      return this.workingRam.readByte(address - 0xe000);\n    }\n    if (address >= 0xff80 && address <= 0xffff) {\n      return this.zeroPage.readByte(address - 0xff80);\n    }\n    if (address >= 0xfe00 && address <= 0xfe9f) {\n      return this.oam.readByte(address - 0xfe00);\n    }\n    if (address >= 0xfea0 && address <= 0xfeff) {\n      // Unused space\n      return 0;\n    }\n    if (address >= 0xfe00 && address <= 0xfe9f) {\n      // Graphics: sprite information: Data about the sprites rendered by the graphics chip are held here, including the\n      // sprites' positions and attributes.\n      throw new Error(\"graphics mem not yet implemented\");\n    }\n    if (address >= 0xff00 && address <= 0xff7f) {\n      return this.io.readByte(address - 0xff00);\n    }\n\n    throw new Error(\"Address not readable\");\n  }\n\n  public readBigEndianWord(address: MemoryAddress): WordValue {\n    return (this.readByte(address + 1) << 8) + this.readByte(address);\n  }\n\n  public writeByte(address: MemoryAddress, value: ByteValue): void {\n    if (address === 0xff50) {\n      console.log('Writing bios', value.toString(16))\n    }\n\n    if (address >= 0x8000 && address <= 0x9fff) {\n      this.vRam.writeByte(address - 0x8000, value);\n    } else if (address >= 0xa000 && address <= 0xbfff) {\n      throw new Error(\n        `Cannot write to ${numberToWordHex(address)} which is on cartridge`\n      );\n    } else if (address >= 0xc000 && address <= 0xdfff) {\n      this.workingRam.writeByte(address - 0xc000, value);\n    } else if (address >= 0xe000 && address <= 0xfdff) {\n      this.workingRam.writeByte(address - 0xe000, value);\n    } else if (address >= 0xff80 && address <= 0xffff) {\n      this.zeroPage.writeByte(address - 0xff80, value);\n    } else if (address >= 0xff00 && address <= 0xff7f) {\n      this.io.writeByte(address - 0xff00, value);\n    } else if (address >= 0xfe00 && address <= 0xfe9f) {\n      this.oam.writeByte(address - 0xfe00, value);\n    } else if (address >= 0xfea0 && address <= 0xfeff) {\n      // Unused space, do nothing\n    } else {\n      throw new Error(`Can't write address ${numberToWordHex(address)}`);\n    }\n  }\n\n  public writeWordBigEndian(address: MemoryAddress, value: WordValue): void {\n    this.writeByte(address + 1, value >> 8);\n    this.writeByte(address, value & 255);\n  }\n}\n\n// [0000-3FFF] Cartridge ROM, bank 0: The first 16,384 bytes of the cartridge program are always available at this point in the memory map. Special circumstances apply:\n// [0000-00FF] BIOS: When the CPU starts up, PC starts at 0000h, which is the start of the 256-byte GameBoy BIOS code. Once the BIOS has run, it is removed from the memory map, and this area of the cartridge rom becomes addressable.\n// [0100-014F] Cartridge header: This section of the cartridge contains data about its name and manufacturer, and must be written in a specific format.\n// [4000-7FFF]\n"],"file":"mmu.js"}