{"version":3,"sources":["../../src/utils/numberUtils.ts"],"names":["byteValueToSignedByte","value","toHex","length","undefined","maxValue","parseInt","Error","toString","start","end","Math","abs","toLowerCase","toHexString","toByteHexString","toWordHexString"],"mappings":";;;;;;;AACA;;AAEO,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAuC;AAC1E,MAAI,CAACA,KAAK,GAAG,IAAT,MAAmB,CAAvB,EAA0B;AACxB,WAAO,EAAE,CAACA,KAAD,GAAS,IAAX,IAAmB,CAA1B;AACD;;AACD,SAAOA,KAAK,GAAG,IAAf;AACD,CALM;;;;AAOP,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACD,KAAD,EAAgBE,MAAhB,EAA4C;AACxD,MAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxB,QAAMC,QAAQ,GAAGC,QAAQ,CAAC,oBAAO,GAAP,EAAYH,MAAZ,CAAD,EAAsB,EAAtB,CAAzB;;AACA,QAAIF,KAAK,GAAGI,QAAZ,EAAsB;AACpB,YAAM,IAAIE,KAAJ,wBACYN,KAAK,CAACO,QAAN,CAAe,EAAf,CADZ,oBACwCL,MADxC,iBAAN;AAGD;AACF;;AACD,MAAMM,KAAK,GAAGR,KAAK,IAAI,CAAT,GAAa,EAAb,GAAkB,GAAhC;AACA,MAAMS,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASX,KAAT,EACTO,QADS,CACA,EADA,EAETK,WAFS,EAAZ;;AAGA,MAAIV,MAAM,KAAKC,SAAf,EAA0B;AACxB,WAAOK,KAAK,GAAGC,GAAf;AACD;;AACD,mBAAUD,KAAV,SAAkB,sBAASC,GAAT,EAAcP,MAAd,EAAsB,GAAtB,CAAlB;AACD,CAjBD;;AAmBO,IAAMW,WAAW,GAAG,SAAdA,WAAc,CAACb,KAAD;AAAA,SAA2BC,KAAK,CAACD,KAAD,CAAhC;AAAA,CAApB;;;;AAEA,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAACd,KAAD;AAAA,SAA8BC,KAAK,CAACD,KAAD,EAAQ,CAAR,CAAnC;AAAA,CAAxB;;;;AAEA,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,CAACf,KAAD;AAAA,SAA8BC,KAAK,CAACD,KAAD,EAAQ,CAAR,CAAnC;AAAA,CAAxB","sourcesContent":["import { ByteValue, SignedByteValue, WordValue } from \"../types\";\nimport { padStart, repeat } from \"lodash\";\n\nexport const byteValueToSignedByte = (value: WordValue): SignedByteValue => {\n  if ((value & 0x80) !== 0) {\n    return -(~value & 0xff) - 1;\n  }\n  return value & 0xff;\n};\n\nconst toHex = (value: number, length?: number): string => {\n  if (length !== undefined) {\n    const maxValue = parseInt(repeat(\"f\", length), 16);\n    if (value > maxValue) {\n      throw new Error(\n        `Can't format ${value.toString(16)} in to ${length} hex digits`\n      );\n    }\n  }\n  const start = value >= 0 ? \"\" : \"-\";\n  const end = Math.abs(value)\n    .toString(16)\n    .toLowerCase();\n  if (length === undefined) {\n    return start + end;\n  }\n  return `${start}${padStart(end, length, \"0\")}`;\n};\n\nexport const toHexString = (value: number): string => toHex(value);\n\nexport const toByteHexString = (value: ByteValue): string => toHex(value, 2);\n\nexport const toWordHexString = (value: WordValue): string => toHex(value, 4);\n"],"file":"numberUtils.js"}