{"version":3,"sources":["../src/types.ts"],"names":["BYTE_BIT_POSITIONS"],"mappings":";;;;;;AAAwC;AAWjC,IAAMA,kBAAkD,GAAG,CAChE,CADgE,EAEhE,CAFgE,EAGhE,CAHgE,EAIhE,CAJgE,EAKhE,CALgE,EAMhE,CANgE,EAOhE,CAPgE,EAQhE,CARgE,CAA3D","sourcesContent":["export type PixelColor = 0 | 1 | 2 | 3; // off (white) -> on/black\n\nexport type ColorNumber = 0 | 1 | 2 | 3;\n\nexport type ByteValue = number;\nexport type SignedByteValue = number;\nexport type WordValue = number;\nexport type BitValue = 1 | 0;\n\nexport type ByteBitPosition = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport const BYTE_BIT_POSITIONS: ReadonlyArray<ByteBitPosition> = [\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n];\n\nexport type MemoryAddress = number;\n\n/*export const numberToByteBinary = (value: ByteValue | WordValue): string =>\n  value.toString(2).padStart(8, \"0\");*/\n\ntype BaseReadonlyUint8Array = Pick<\n  Uint8Array,\n  Exclude<\n    keyof Readonly<Uint8Array>,\n    \"fill\" | \"copyWithin\" | \"reverse\" | \"set\" | \"sort\"\n  >\n>;\n\nexport interface ReadonlyUint8Array extends BaseReadonlyUint8Array {\n  [Symbol.iterator](): IterableIterator<number>;\n}\n"],"file":"types.js"}