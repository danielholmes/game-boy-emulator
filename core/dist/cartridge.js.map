{"version":3,"sources":["../src/cartridge.ts"],"names":["Cartridge","bytes","address","isValid","cartridge","map","readByte","nintendoLogo","CartridgeBuilder","program","_program","Uint8Array","clone"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA;IACaA,S;;;AAGX,qBAAmBC,KAAnB,EAAsC;AAAA;;AAAA;;AACpC,SAAKA,KAAL,GAAaA,KAAb;AACD;;;;6BAEeC,O,EAAmC;AACjD,aAAO,KAAKD,KAAL,CAAWC,OAAX,CAAP;AACD;;;;;;;;AAGI,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD;AAAA,SACrB,qBACE,mBAAM,MAAN,EAAc,SAAS,CAAvB,EACGC,GADH,CACO,UAACH,OAAD;AAAA,WAAaE,SAAS,CAACE,QAAV,CAAmBJ,OAAnB,CAAb;AAAA,GADP,CADF,EAGEK,qBAHF,CADqB;AAAA,CAAhB;;;;IAOMC,gB;;;AAGX,4BAAoBC,OAApB,EACA;AAAA;;AAAA;;AACE,SAAKC,QAAL,GAAgBD,OAAO,IAAI,IAAIE,UAAJ,EAA3B;AACD;;;;4BAEcF,Q,EAAkE;AAC/E,aAAO,KAAKG,KAAL,CAAW;AAAEH,QAAAA,OAAO,EAAE,IAAIE,UAAJ,CAAeF,QAAf;AAAX,OAAX,CAAP;AACD;;;4BAEyB;AACxB,aAAO,IAAIT,SAAJ,CACL,IAAIW,UAAJ,8BAEK,mBAAM,MAAN,EAAc,MAAd,EAAsBN,GAAtB,CAA0B;AAAA,eAAM,IAAN;AAAA,OAA1B,CAFL,sBAIKE,qBAJL,sBAKK,KAAKG,QALV,GADK,CAAP;AASD;;;gCAEsE;AAAA,UAAvDD,OAAuD,QAAvDA,OAAuD;AACrE,aAAO,IAAID,gBAAJ,CAAqBC,OAAO,IAAI,KAAKC,QAArC,CAAP;AACD;;;8BAEyC;AACxC,aAAO,IAAIF,gBAAJ,EAAP;AACD","sourcesContent":["import { ByteValue, MemoryAddress } from \"./types\";\nimport { isEqual, range } from \"lodash\";\nimport nintendoLogo from \"./nintendoLogo\";\n\n// TODO: ROM banks, etc\nexport class Cartridge {\n  public readonly bytes: Uint8Array;\n\n  public constructor(bytes: Uint8Array) {\n    this.bytes = bytes;\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return this.bytes[address];\n  }\n}\n\nexport const isValid = (cartridge: Cartridge): Boolean =>\n  isEqual(\n    range(0x0104, 0x0133 + 1)\n      .map((address) => cartridge.readByte(address)),\n    nintendoLogo\n  );\n\nexport class CartridgeBuilder {\n  private readonly _program: Uint8Array;\n\n  private constructor(program?: Uint8Array)\n  {\n    this._program = program || new Uint8Array();\n  }\n\n  public program(program: Uint8Array | ReadonlyArray<ByteValue>): CartridgeBuilder {\n    return this.clone({ program: new Uint8Array(program) });\n  }\n\n  public build(): Cartridge {\n    return new Cartridge(\n      new Uint8Array([\n        // header\n        ...range(0x0000, 0x0104).map(() => 0x00),\n        // nintendo logo\n        ...nintendoLogo,\n        ...this._program\n      ])\n    )\n  }\n\n  private clone({ program }: { program?: Uint8Array }): CartridgeBuilder {\n    return new CartridgeBuilder(program || this._program);\n  }\n\n  public static builder(): CartridgeBuilder {\n    return new CartridgeBuilder();\n  }\n}\n"],"file":"cartridge.js"}