{"version":3,"sources":["../src/cartridge.ts"],"names":["CARTRIDGE_LENGTH","CARTRIDGE_START_LENGTH","CARTRIDGE_PROGRAM_START","nintendoLogo","length","MAX_CARTRIDGE_PROGRAM_LENGTH","Cartridge","bytes","address","CartridgeBuilder","program","builder","build","_program","Uint8Array","Error","clone","map","isValid","cartridge","readByte"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAG,MAAzB;AACA,IAAMC,sBAAsB,GAAG,MAA/B;AACO,IAAMC,uBAA+B,GAC1CD,sBAAsB,GAAGE,sBAAaC,MADjC;;AAEP,IAAMC,4BAAoC,GACxCL,gBAAgB,GAAGE,uBADrB,C,CAGA;;IACaI,S;;;AAGX,qBAAmBC,KAAnB,EAA8C;AAAA;;AAAA;;AAC5C,SAAKA,KAAL,GAAaA,KAAb;AACD;;;;6BAEeC,O,EAAmC;AACjD,aAAO,KAAKD,KAAL,CAAWC,OAAX,CAAP;AACD;AAED;;;;8BAC0C;AACxC,aAAO,IAAIC,gBAAJ,EAAP;AACD;AACD;;;;qCAGEC,O,EACW;AACX,aAAOJ,SAAS,CAACK,OAAV,GACJD,OADI,CACIA,OADJ,EAEJE,KAFI,EAAP;AAGD;;;;;;;;IAGGH,gB;;;AAGJ,4BAAmBC,OAAnB,EAAiD;AAAA;;AAAA;;AAC/C,SAAKG,QAAL,GAAgBH,OAAO,IAAI,IAAII,UAAJ,CAAed,gBAAf,CAA3B;AACD;;;;4BAGCU,Q,EACkB;AAClB,UAAIA,QAAO,CAACN,MAAR,GAAiBC,4BAArB,EAAmD;AACjD,cAAM,IAAIU,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,aAAO,KAAKC,KAAL,CAAW;AAChBN,QAAAA,OAAO,EAAE,IAAII,UAAJ,8BACJJ,QADI,sBAEJ,mBAAM,CAAN,EAASL,4BAA4B,GAAGK,QAAO,CAACN,MAAhD,EAAwDa,GAAxD,CACD;AAAA,iBAAM,IAAN;AAAA,SADC,CAFI;AADO,OAAX,CAAP;AAQD;;;4BAEyB;AACxB,aAAO,IAAIX,SAAJ,CACL,IAAIQ,UAAJ,8BAEK,mBAAM,MAAN,EAAcb,sBAAd,EAAsCgB,GAAtC,CAA0C;AAAA,eAAM,IAAN;AAAA,OAA1C,CAFL,sBAIKd,qBAJL,sBAKK,KAAKU,QALV,GADK,CAAP;AASD;;;gCAMoB;AAAA,UAHnBH,OAGmB,QAHnBA,OAGmB;AACnB,aAAO,IAAID,gBAAJ,CAAqBC,OAAO,IAAI,KAAKG,QAArC,CAAP;AACD;;;;;;AAGI,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD;AAAA,SACrB,qBACE,IAAIL,UAAJ,CACE,mBACEb,sBADF,EAEEA,sBAAsB,GAAGE,sBAAaC,MAFxC,EAGEa,GAHF,CAGM,UAAAT,OAAO;AAAA,WAAIW,SAAS,CAACC,QAAV,CAAmBZ,OAAnB,CAAJ;AAAA,GAHb,CADF,CADF,EAOEL,qBAPF,CADqB;AAAA,CAAhB","sourcesContent":["import { ByteValue, MemoryAddress, ReadonlyUint8Array } from \"./types\";\nimport { isEqual, range } from \"lodash\";\nimport nintendoLogo from \"./nintendoLogo\";\n\nconst CARTRIDGE_LENGTH = 0x8000;\nconst CARTRIDGE_START_LENGTH = 0x0104;\nexport const CARTRIDGE_PROGRAM_START: number =\n  CARTRIDGE_START_LENGTH + nintendoLogo.length;\nconst MAX_CARTRIDGE_PROGRAM_LENGTH: number =\n  CARTRIDGE_LENGTH - CARTRIDGE_PROGRAM_START;\n\n// TODO: ROM banks, etc\nexport class Cartridge {\n  public readonly bytes: ReadonlyUint8Array;\n\n  public constructor(bytes: ReadonlyUint8Array) {\n    this.bytes = bytes;\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return this.bytes[address];\n  }\n\n  /* eslint-disable @typescript-eslint/no-use-before-define */\n  public static builder(): CartridgeBuilder {\n    return new CartridgeBuilder();\n  }\n  /* eslint-enable @typescript-eslint/no-use-before-define */\n\n  public static buildWithProgram(\n    program: ReadonlyUint8Array | ReadonlyArray<ByteValue>\n  ): Cartridge {\n    return Cartridge.builder()\n      .program(program)\n      .build();\n  }\n}\n\nclass CartridgeBuilder {\n  private readonly _program: ReadonlyUint8Array;\n\n  public constructor(program?: ReadonlyUint8Array) {\n    this._program = program || new Uint8Array(CARTRIDGE_LENGTH);\n  }\n\n  public program(\n    program: ReadonlyUint8Array | ReadonlyArray<ByteValue>\n  ): CartridgeBuilder {\n    if (program.length > MAX_CARTRIDGE_PROGRAM_LENGTH) {\n      throw new Error(\"program too long\");\n    }\n    return this.clone({\n      program: new Uint8Array([\n        ...program,\n        ...range(0, MAX_CARTRIDGE_PROGRAM_LENGTH - program.length).map(\n          () => 0x00\n        )\n      ])\n    });\n  }\n\n  public build(): Cartridge {\n    return new Cartridge(\n      new Uint8Array([\n        // empty beginning\n        ...range(0x0000, CARTRIDGE_START_LENGTH).map(() => 0x00),\n        // header\n        ...nintendoLogo,\n        ...this._program\n      ])\n    );\n  }\n\n  private clone({\n    program\n  }: {\n    program?: ReadonlyUint8Array;\n  }): CartridgeBuilder {\n    return new CartridgeBuilder(program || this._program);\n  }\n}\n\nexport const isValid = (cartridge: Cartridge): boolean =>\n  isEqual(\n    new Uint8Array(\n      range(\n        CARTRIDGE_START_LENGTH,\n        CARTRIDGE_START_LENGTH + nintendoLogo.length\n      ).map(address => cartridge.readByte(address))\n    ),\n    nintendoLogo\n  );\n"],"file":"cartridge.js"}