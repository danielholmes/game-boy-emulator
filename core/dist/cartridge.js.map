{"version":3,"sources":["../src/cartridge.ts"],"names":["Cartridge","bytes","address","isValid","cartridge","map","readByte","nintendoLogo"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;AAEA;IACaA,S;;;AAGX,qBAAmBC,KAAnB,EAAsC;AAAA;;AAAA;;AACpC,SAAKA,KAAL,GAAaA,KAAb;AACD;;;;6BAEeC,O,EAAmC;AACjD,aAAO,KAAKD,KAAL,CAAWC,OAAX,CAAP;AACD;;;;;;;;AAGI,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD;AAAA,SACrB,qBACE,mBAAM,MAAN,EAAc,SAAS,CAAvB,EACGC,GADH,CACO,UAACH,OAAD;AAAA,WAAaE,SAAS,CAACE,QAAV,CAAmBJ,OAAnB,CAAb;AAAA,GADP,CADF,EAGEK,qBAHF,CADqB;AAAA,CAAhB","sourcesContent":["import { ByteValue, MemoryAddress } from \"./types\";\nimport { isEqual, range } from \"lodash\";\nimport nintendoLogo from \"./nintendoLogo\";\n\n// TODO: ROM banks, etc\nexport class Cartridge {\n  public readonly bytes: Uint8Array;\n\n  public constructor(bytes: Uint8Array) {\n    this.bytes = bytes;\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return this.bytes[address];\n  }\n}\n\nexport const isValid = (cartridge: Cartridge): Boolean =>\n  isEqual(\n    range(0x0104, 0x0133 + 1)\n      .map((address) => cartridge.readByte(address)),\n    nintendoLogo\n  )\n"],"file":"cartridge.js"}