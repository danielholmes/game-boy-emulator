{"version":3,"sources":["../src/cartridge.ts"],"names":["Cartridge","bytes","slice","nintendoLogo","Error","address","Uint8Array","length"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA;IACaA,S;;;AAIX,qBAAmBC,KAAnB,EAAsC;AAAA;;AAAA;;AACpC;AACA,QAAI,CAAC,wCAAYA,KAAK,CAACC,KAAN,CAAY,MAAZ,EAAoB,SAAS,CAA7B,CAAZ,GAA8CC,qBAA9C,CAAL,EAAkE;AAChE,YAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACD;;AACD,SAAKH,KAAL,GAAaA,KAAb;AACD;;;;6BAEeI,O,EAAmC;AACjD,aAAO,KAAKJ,KAAL,CAAWI,OAAX,CAAP;AACD;;;wCAEiCJ,K,EAA8B;AAC9D,aAAO,IAAID,SAAJ,CACL,IAAIM,UAAJ,EACE,IADF,EACQ;AACN,UAFF,EAEQ;AACN,UAHF,EAGQ;AACN,UAJF,4BAKKH,qBALL,sBAMKF,KANL,GADK,CAAP;AAUD;;;;;;;;gBA3BUD,S,cACsC,IAAIG,sBAAaI,M","sourcesContent":["import { ByteValue, MemoryAddress } from \"./types\";\nimport { isEqual } from \"lodash\";\nimport nintendoLogo from './nintendoLogo';\n\n// TODO: ROM banks, etc\nexport class Cartridge {\n  public static readonly PC_START: MemoryAddress = 4 + nintendoLogo.length;\n  public readonly bytes: Uint8Array;\n\n  public constructor(bytes: Uint8Array) {\n    // TODO: Should allow this, this check should be somewhere else, not sure where\n    if (!isEqual([...bytes.slice(0x0004, 0x0033 + 1)], nintendoLogo)) {\n      throw new Error(\"invalid rom\");\n    }\n    this.bytes = bytes;\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return this.bytes[address];\n  }\n\n  public static newWithNintendoLogo(bytes: Uint8Array): Cartridge {\n    return new Cartridge(\n      new Uint8Array([\n        0x00, // 0x0100\n        0x00, // 0x0101\n        0x00, // 0x0102\n        0x00, // 0x0103\n        ...nintendoLogo,\n        ...bytes\n      ])\n    );\n  }\n}\n"],"file":"cartridge.js"}