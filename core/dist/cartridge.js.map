{"version":3,"sources":["../src/cartridge.ts"],"names":["Cartridge","bytes","address","isValid","cartridge","map","readByte","nintendoLogo","CARTRIDGE_LENGTH","CARTRIDGE_HEADER_LENGTH","MAX_CARTRIDGE_PROGRAM_LENGTH","length","CartridgeBuilder","program","_program","Uint8Array","Error","clone"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA;IACaA,S;;;AAGX,qBAAmBC,KAAnB,EAAsC;AAAA;;AAAA;;AACpC,SAAKA,KAAL,GAAaA,KAAb;AACD;;;;6BAEeC,O,EAAmC;AACjD,aAAO,KAAKD,KAAL,CAAWC,OAAX,CAAP;AACD;;;;;;;;AAGI,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD;AAAA,SACrB,qBACE,mBAAM,MAAN,EAAc,SAAS,CAAvB,EACGC,GADH,CACO,UAACH,OAAD;AAAA,WAAaE,SAAS,CAACE,QAAV,CAAmBJ,OAAnB,CAAb;AAAA,GADP,CADF,EAGEK,qBAHF,CADqB;AAAA,CAAhB;;;AAOP,IAAMC,gBAAwB,GAAG,MAAjC;AACA,IAAMC,uBAA+B,GAAG,MAAxC;AACA,IAAMC,4BAAoC,GAAGF,gBAAgB,GAAGC,uBAAnB,GAA6CF,sBAAaI,MAAvG;;IAEaC,gB;;;AAGX,4BAAoBC,OAApB,EACA;AAAA;;AAAA;;AACE,SAAKC,QAAL,GAAgBD,OAAO,IAAI,IAAIE,UAAJ,CAAeP,gBAAf,CAA3B;AACD;;;;4BAEcK,Q,EAAkE;AAC/E,UAAIA,QAAO,CAACF,MAAR,GAAiBD,4BAArB,EAAmD;AACjD,cAAM,IAAIM,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,aAAO,KAAKC,KAAL,CAAW;AAChBJ,QAAAA,OAAO,EAAE,IAAIE,UAAJ,8BACJF,QADI,sBAEJ,mBAAM,CAAN,EAASH,4BAA4B,GAAGG,QAAO,CAACF,MAAhD,EACAN,GADA,CACI;AAAA,iBAAM,IAAN;AAAA,SADJ,CAFI;AADO,OAAX,CAAP;AAOD;;;4BAEyB;AACxB,aAAO,IAAIL,SAAJ,CACL,IAAIe,UAAJ,8BAEK,mBAAM,MAAN,EAAcN,uBAAd,EAAuCJ,GAAvC,CAA2C;AAAA,eAAM,IAAN;AAAA,OAA3C,CAFL,sBAGKE,qBAHL,sBAIK,KAAKO,QAJV,GADK,CAAP;AAQD;;;gCAEsE;AAAA,UAAvDD,OAAuD,QAAvDA,OAAuD;AACrE,aAAO,IAAID,gBAAJ,CAAqBC,OAAO,IAAI,KAAKC,QAArC,CAAP;AACD;;;8BAEyC;AACxC,aAAO,IAAIF,gBAAJ,EAAP;AACD","sourcesContent":["import { ByteValue, MemoryAddress } from \"./types\";\nimport { isEqual, range } from \"lodash\";\nimport nintendoLogo from \"./nintendoLogo\";\n\n// TODO: ROM banks, etc\nexport class Cartridge {\n  public readonly bytes: Uint8Array;\n\n  public constructor(bytes: Uint8Array) {\n    this.bytes = bytes;\n  }\n\n  public readByte(address: MemoryAddress): ByteValue {\n    return this.bytes[address];\n  }\n}\n\nexport const isValid = (cartridge: Cartridge): Boolean =>\n  isEqual(\n    range(0x0104, 0x0133 + 1)\n      .map((address) => cartridge.readByte(address)),\n    nintendoLogo\n  );\n\nconst CARTRIDGE_LENGTH: number = 0x8000;\nconst CARTRIDGE_HEADER_LENGTH: number = 0x0104;\nconst MAX_CARTRIDGE_PROGRAM_LENGTH: number = CARTRIDGE_LENGTH - CARTRIDGE_HEADER_LENGTH - nintendoLogo.length;\n\nexport class CartridgeBuilder {\n  private readonly _program: Uint8Array;\n\n  private constructor(program?: Uint8Array)\n  {\n    this._program = program || new Uint8Array(CARTRIDGE_LENGTH);\n  }\n\n  public program(program: Uint8Array | ReadonlyArray<ByteValue>): CartridgeBuilder {\n    if (program.length > MAX_CARTRIDGE_PROGRAM_LENGTH) {\n      throw new Error('program too long')\n    }\n    return this.clone({\n      program: new Uint8Array([\n        ...program,\n        ...range(0, MAX_CARTRIDGE_PROGRAM_LENGTH - program.length)\n          .map(() => 0x00)\n      ])\n    });\n  }\n\n  public build(): Cartridge {\n    return new Cartridge(\n      new Uint8Array([\n        // empty header\n        ...range(0x0000, CARTRIDGE_HEADER_LENGTH).map(() => 0x00),\n        ...nintendoLogo,\n        ...this._program\n      ])\n    )\n  }\n\n  private clone({ program }: { program?: Uint8Array }): CartridgeBuilder {\n    return new CartridgeBuilder(program || this._program);\n  }\n\n  public static builder(): CartridgeBuilder {\n    return new CartridgeBuilder();\n  }\n}\n"],"file":"cartridge.js"}